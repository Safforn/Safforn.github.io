<?xml version="1.0" encoding="utf-8"?>
<search>
  <entry>
    <title>Android Studio安装教程及踩坑</title>
    <url>/2023/02/27/Android-Studio-Install-Q&amp;A/</url>
    <content><![CDATA[<h2 id="0-准备"><a href="#0-准备" class="headerlink" title="0. 准备"></a>0. 准备</h2><p><a href="https://developer.android.google.cn/studio/archive?hl=zh-cn">Android Studio下载文件(推荐3.5.2)</a></p>
<hr>
<h2 id="1-安装"><a href="#1-安装" class="headerlink" title="1. 安装"></a>1. 安装</h2><p>教程1：<a href="https://blog.csdn.net/m0_38076341/article/details/115562334">Android Studio（3.5.2）安装和配置</a><br>教程2(B站视频)：<a href="https://www.bilibili.com/video/BV1S44y1572j">保姆级Android Studio+JDK安装配置教程带字幕-bilibili</a><br>补充：<a href="https://www.cnblogs.com/martin-1/p/15240843.html">更换Android studio中的SDK和AVD位置</a></p>
<hr>
<h2 id="2-遇到问题及解决"><a href="#2-遇到问题及解决" class="headerlink" title="2. 遇到问题及解决"></a>2. 遇到问题及解决</h2><p><a href="https://blog.csdn.net/yw00yw/article/details/105397976">Android Studio 解决 Error : module not specified错误</a><br><a href="https://blog.csdn.net/weixin_42473228/article/details/118542634">Could not install Gradle distribution from “https://services.gradle.org/..."</a></p>
<hr>
]]></content>
      <categories>
        <category>技术</category>
      </categories>
      <tags>
        <tag>Android Studio</tag>
        <tag>Android</tag>
      </tags>
  </entry>
  <entry>
    <title>Android 开发入门</title>
    <url>/2023/03/10/Android-develop-introduction/</url>
    <content><![CDATA[<h2 id="各种组件"><a href="#各种组件" class="headerlink" title="各种组件"></a>各种组件</h2><ol>
<li><p>文本视图（TextView）</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">TextView</span></span></span><br><span class="line"><span class="tag">        <span class="attr">android:id</span>=<span class="string">&quot;@+id/tv_username&quot;</span></span></span><br><span class="line"><span class="tag">		<span class="attr">android:layout_width</span>=<span class="string">&quot;wrap_content&quot;</span>  </span></span><br><span class="line"><span class="tag">    	<span class="attr">android:layout_height</span>=<span class="string">&quot;60dp&quot;</span></span></span><br><span class="line"><span class="tag">    	<span class="attr">android:layout_marginStart</span>=<span class="string">&quot;5dp&quot;</span></span></span><br><span class="line"><span class="tag">    	<span class="attr">android:layout_marginTop</span>=<span class="string">&quot;5dp&quot;</span></span></span><br><span class="line"><span class="tag">    	<span class="attr">android:text</span>=<span class="string">&quot;用户名&quot;</span></span></span><br><span class="line"><span class="tag">    	<span class="attr">android:textColor</span>=<span class="string">&quot;#000000&quot;</span></span></span><br><span class="line"><span class="tag">    	<span class="attr">android:textSize</span>=<span class="string">&quot;20sp&quot;</span> /&gt;</span></span><br></pre></td></tr></table></figure>
<p><code>android:autoLink</code> 属性用于识别链接，<code>&quot;web&quot;</code>识别web网址，<code>&quot;phone&quot;</code>识别电话号码，<code>&quot;email&quot;</code>识别邮件地址，<code>&quot;all&quot;</code>识别所有类型</p>
</li>
<li><p>图像视图（ImageView）</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">ImageView</span></span></span><br><span class="line"><span class="tag">        <span class="attr">android:id</span>=<span class="string">&quot;@+id/img_id&quot;</span></span></span><br><span class="line"><span class="tag">        <span class="attr">android:layout_width</span>=<span class="string">&quot;match_parent&quot;</span></span></span><br><span class="line"><span class="tag">        <span class="attr">android:layout_height</span>=<span class="string">&quot;150dp&quot;</span></span></span><br><span class="line"><span class="tag">        <span class="attr">android:src</span>=<span class="string">&quot;@drawable/img_name_without_suffix&quot;</span> /&gt;</span></span><br></pre></td></tr></table></figure>

</li>
<li><p>按钮（Button）</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">Button</span></span></span><br><span class="line"><span class="tag">       	<span class="attr">android:id</span>=<span class="string">&quot;@+id/login_btn&quot;</span></span></span><br><span class="line"><span class="tag">        <span class="attr">android:layout_width</span>=<span class="string">&quot;100dp&quot;</span></span></span><br><span class="line"><span class="tag">        <span class="attr">android:layout_height</span>=<span class="string">&quot;wrap_content&quot;</span></span></span><br><span class="line"><span class="tag">        <span class="attr">android:layout_marginStart</span>=<span class="string">&quot;160dp&quot;</span></span></span><br><span class="line"><span class="tag">        <span class="attr">android:layout_marginTop</span>=<span class="string">&quot;5dp&quot;</span></span></span><br><span class="line"><span class="tag">        <span class="attr">android:backgroundTint</span>=<span class="string">&quot;@android:color/background_dark&quot;</span></span></span><br><span class="line"><span class="tag">        <span class="attr">android:text</span>=<span class="string">&quot;登录&quot;</span></span></span><br><span class="line"><span class="tag">        <span class="attr">android:textColor</span>=<span class="string">&quot;#ffffff&quot;</span></span></span><br><span class="line"><span class="tag">        <span class="attr">android:onClick</span>=<span class="string">&quot;myClick&quot;</span></span></span><br><span class="line"><span class="tag">        <span class="attr">android:textSize</span>=<span class="string">&quot;18sp&quot;</span></span></span><br><span class="line"><span class="tag">        <span class="attr">android:visibility</span>=<span class="string">&quot;visible&quot;</span> /&gt;</span></span><br></pre></td></tr></table></figure>
</li>
<li><p>编辑框（EditText）</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">EditText</span></span></span><br><span class="line"><span class="tag">		<span class="attr">android:id</span>=<span class="string">&quot;@+id/et_pwd&quot;</span></span></span><br><span class="line"><span class="tag">		<span class="attr">android:layout_width</span>=<span class="string">&quot;200dp&quot;</span></span></span><br><span class="line"><span class="tag">		<span class="attr">android:layout_height</span>=<span class="string">&quot;60dp&quot;</span></span></span><br><span class="line"><span class="tag">		<span class="attr">android:layout_marginStart</span>=<span class="string">&quot;5dp&quot;</span></span></span><br><span class="line"><span class="tag">		<span class="attr">android:layout_marginTop</span>=<span class="string">&quot;5dp&quot;</span></span></span><br><span class="line"><span class="tag">		<span class="attr">android:hint</span>=<span class="string">&quot;请输入密码&quot;</span></span></span><br><span class="line"><span class="tag">		<span class="attr">android:textColorHint</span>=<span class="string">&quot;#747373&quot;</span> /&gt;</span></span><br></pre></td></tr></table></figure>
<p><code>android:inputType</code>属性用于识别输入文字类型，<code>&quot;phone&quot;</code>识别电话号码，……<br>关于更多inputType属性相关内容可以参考：<a href="https://www.jianshu.com/p/ca73cc4464f6">android: inputType - 简书</a><br>获取编辑框输入：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="type">EditText</span> <span class="variable">et_name</span> <span class="operator">=</span> findViewById(R.id.et_name);</span><br><span class="line"><span class="type">String</span> <span class="variable">name</span> <span class="operator">=</span> et_name.getText().toString();</span><br></pre></td></tr></table></figure>
</li>
<li><p>单选框（RadioButton）</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">RadioGroup</span></span></span><br><span class="line"><span class="tag">		<span class="attr">android:id</span>=<span class="string">&quot;@+id/rg&quot;</span></span></span><br><span class="line"><span class="tag">   	 	<span class="attr">android:layout_width</span>=<span class="string">&quot;250dp&quot;</span></span></span><br><span class="line"><span class="tag"> 		<span class="attr">android:layout_height</span>=<span class="string">&quot;230dp&quot;</span> &gt;</span></span><br><span class="line"> 		<span class="tag">&lt;<span class="name">RadioButton</span></span></span><br><span class="line"><span class="tag"> 			<span class="attr">android:id</span>=<span class="string">&quot;@+id/size_S&quot;</span></span></span><br><span class="line"><span class="tag"> 			<span class="attr">android:layout_width</span>=<span class="string">&quot;160dp&quot;</span></span></span><br><span class="line"><span class="tag"> 			<span class="attr">android:layout_height</span>=<span class="string">&quot;30dp&quot;</span></span></span><br><span class="line"><span class="tag"> 			<span class="attr">android:layout_weight</span>=<span class="string">&quot;1&quot;</span></span></span><br><span class="line"><span class="tag"> 			<span class="attr">android:text</span>=<span class="string">&quot;size_S&quot;</span></span></span><br><span class="line"><span class="tag"> 			<span class="attr">android:textSize</span>=<span class="string">&quot;18sp&quot;</span>/&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">RadioGroup</span>&gt;</span></span><br></pre></td></tr></table></figure>
<p>获取选中值（e.g. 男女性别选择）：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="type">RadioButton</span> <span class="variable">rb_male</span> <span class="operator">=</span> findViewById(R.id.rb_male);</span><br><span class="line"><span class="type">String</span> <span class="variable">sex</span> <span class="operator">=</span> male.isChecked() ? <span class="string">&quot;男&quot;</span> : <span class="string">&quot;女&quot;</span>;</span><br></pre></td></tr></table></figure>
</li>
<li><p>复选框（Checkbox）</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">CheckBox</span></span></span><br><span class="line"><span class="tag">        <span class="attr">android:id</span>=<span class="string">&quot;@+id/cb_run&quot;</span></span></span><br><span class="line"><span class="tag">        <span class="attr">android:layout_width</span>=<span class="string">&quot;160dp&quot;</span></span></span><br><span class="line"><span class="tag">        <span class="attr">android:layout_height</span>=<span class="string">&quot;30dp&quot;</span></span></span><br><span class="line"><span class="tag">        <span class="attr">android:layout_marginStart</span>=<span class="string">&quot;50dp&quot;</span></span></span><br><span class="line"><span class="tag">        <span class="attr">android:layout_marginTop</span>=<span class="string">&quot;10dp&quot;</span></span></span><br><span class="line"><span class="tag">        <span class="attr">android:text</span>=<span class="string">&quot;早起跑10km&quot;</span></span></span><br><span class="line"><span class="tag">        <span class="attr">android:textSize</span>=<span class="string">&quot;20sp&quot;</span> /&gt;</span></span><br></pre></td></tr></table></figure>
<p>是否选中：<code>cb_run.isChecked()</code></p>
</li>
<li><p>会话框（Dialog）</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">AlertDialog.<span class="type">Builder</span> <span class="variable">builder</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">AlertDialog</span>.Builder(MainActivity.<span class="built_in">this</span>);</span><br><span class="line">builder.setTitle(<span class="string">&quot;尊敬的&quot;</span>+username+<span class="string">&quot; 舰长&quot;</span>);</span><br><span class="line">builder.setMessage(<span class="string">&quot;我是一个对话框~QwQ~&quot;</span>);</span><br><span class="line">builder.setPositiveButton(<span class="string">&quot;正面回答&quot;</span>, (dialog, which) -&gt; posOnClickListenerMethod());</span><br><span class="line">builder.setNegativeButton(<span class="string">&quot;消极回答&quot;</span>, <span class="literal">null</span>);</span><br><span class="line"><span class="type">AlertDialog</span> <span class="variable">dialog</span> <span class="operator">=</span> bd.create();</span><br><span class="line">dialog.show();</span><br></pre></td></tr></table></figure>
</li>
<li><p>Toast（短时提示信息）</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="type">Toast</span> <span class="variable">toast</span> <span class="operator">=</span> Toast.makeText(getApplicationContext(), <span class="string">&quot;提示信息&quot;</span>, Toast.LENGTH_SHORT);</span><br><span class="line">toast.show();</span><br></pre></td></tr></table></figure>
</li>
<li><p>Spinner（下拉栏）</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 需要在MainActivity类中添加成员变量 Spinner spinner; 和 String[] deptsArray;</span></span><br><span class="line"><span class="comment">// 在onCreate()函数中添加以下代码</span></span><br><span class="line">spinner = findViewById(R.id.spinner);  <span class="comment">//获取Spinner组件</span></span><br><span class="line">deptsArray = getResources().getStringArray(R.array.spinner_data);  <span class="comment">//获取array中定义的值</span></span><br><span class="line">spinner.setOnItemSelectedListener(<span class="keyword">new</span> <span class="title class_">AdapterView</span>.OnItemSelectedListener() &#123;  <span class="comment">//添加Spinner监听事件</span></span><br><span class="line">	<span class="meta">@Override</span></span><br><span class="line">	<span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">onItemSelected</span><span class="params">(AdapterView&lt;?&gt; parent, View view, <span class="type">int</span> pos, <span class="type">long</span> id)</span> &#123;</span><br><span class="line">		spinnerContent = deptsArray[pos];&#125;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">onNothingSelected</span><span class="params">(AdapterView&lt;?&gt; parent)</span> &#123;&#125;</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure>
<p>其他 获取spinner选中的值 的方法可以参考：<a href="https://blog.csdn.net/paokuhuashang/article/details/104882857">Android 获取spinner选中的值-小小白的CSDN博客</a> 和 <a href="https://www.cnblogs.com/does/p/12795980.html">Android Spinner下拉框的基本使用-博客园 </a></p>
</li>
<li><p>Intent（将信息传给其他Activity）</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 发送方 MainActivity</span></span><br><span class="line"><span class="type">Intent</span> <span class="variable">intent</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Intent</span>(MainActivity.<span class="built_in">this</span>, ReceiverActivity.class);</span><br><span class="line">intent.putExtra(<span class="string">&quot;data&quot;</span>, message);  <span class="comment">// 参数分别为 信息名, 信息体</span></span><br><span class="line">startActivity(intent);  <span class="comment">//启动Activity</span></span><br><span class="line">finish();</span><br></pre></td></tr></table></figure>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 接收方 ReceiverActivity</span></span><br><span class="line"><span class="type">Intent</span> <span class="variable">intent</span> <span class="operator">=</span> getIntent();</span><br><span class="line"><span class="type">String</span> <span class="variable">message</span> <span class="operator">=</span> intent.getStringExtra(<span class="string">&quot;data&quot;</span>);  <span class="comment">// 根据信息名获取信息</span></span><br></pre></td></tr></table></figure></li>
</ol>
<hr>
<h2 id="各种布局"><a href="#各种布局" class="headerlink" title="各种布局"></a>各种布局</h2><ol>
<li><p>线性布局（水平）</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">LinearLayout</span></span></span><br><span class="line"><span class="tag">        <span class="attr">android:layout_width</span>=<span class="string">&quot;match_parent&quot;</span></span></span><br><span class="line"><span class="tag">        <span class="attr">android:layout_height</span>=<span class="string">&quot;150dp&quot;</span></span></span><br><span class="line"><span class="tag">        <span class="attr">android:orientation</span>=<span class="string">&quot;horizontal&quot;</span>&gt;</span></span><br><span class="line">    ...</span><br><span class="line"><span class="tag">&lt;/<span class="name">LinearLayout</span>&gt;</span></span><br></pre></td></tr></table></figure>
</li>
<li><p>相对布局（内部组件居中）</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">RelativeLayout</span></span></span><br><span class="line"><span class="tag">        <span class="attr">android:layout_width</span>=<span class="string">&quot;match_parent&quot;</span></span></span><br><span class="line"><span class="tag">        <span class="attr">android:layout_height</span>=<span class="string">&quot;match_parent&quot;</span></span></span><br><span class="line"><span class="tag">        <span class="attr">android:layout_marginTop</span>=<span class="string">&quot;20dp&quot;</span></span></span><br><span class="line"><span class="tag">        <span class="attr">android:layout_centerHorizontal</span>=<span class="string">&quot;true&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">RelativeLayout</span>&gt;</span></span><br></pre></td></tr></table></figure>
</li>
<li><p>表格布局（首行为 文字+编辑框）</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">TableLayout</span></span></span><br><span class="line"><span class="tag">		<span class="attr">android:layout_width</span>=<span class="string">&quot;match_parent&quot;</span></span></span><br><span class="line"><span class="tag">		<span class="attr">android:layout_height</span>=<span class="string">&quot;150dp&quot;</span>&gt;</span></span><br><span class="line">		<span class="tag">&lt;<span class="name">TableRow</span>&gt;</span></span><br><span class="line">			<span class="tag">&lt;<span class="name">TextView</span></span></span><br><span class="line"><span class="tag">				<span class="attr">android:layout_width</span>=<span class="string">&quot;wrap_content&quot;</span></span></span><br><span class="line"><span class="tag">                <span class="attr">android:layout_height</span>=<span class="string">&quot;60dp&quot;</span></span></span><br><span class="line"><span class="tag">                <span class="attr">android:text</span>=<span class="string">&quot;@string/account&quot;</span></span></span><br><span class="line"><span class="tag">                <span class="attr">android:textColor</span>=<span class="string">&quot;#000000&quot;</span></span></span><br><span class="line"><span class="tag">                <span class="attr">android:textSize</span>=<span class="string">&quot;20sp&quot;</span> /&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">EditText</span></span></span><br><span class="line"><span class="tag">                <span class="attr">android:id</span>=<span class="string">&quot;@+id/et_name&quot;</span></span></span><br><span class="line"><span class="tag">                <span class="attr">android:layout_width</span>=<span class="string">&quot;200dp&quot;</span></span></span><br><span class="line"><span class="tag">                <span class="attr">android:layout_height</span>=<span class="string">&quot;60dp&quot;</span></span></span><br><span class="line"><span class="tag">                <span class="attr">android:hint</span>=<span class="string">&quot;@string/input_account&quot;</span></span></span><br><span class="line"><span class="tag">                <span class="attr">android:textColorHint</span>=<span class="string">&quot;#747373&quot;</span> /&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">TableRow</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">TableLayout</span>&gt;</span></span><br></pre></td></tr></table></figure></li>
<li><p>框架布局 &#x2F; 帧布局</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">FrameLayout</span></span></span><br><span class="line"><span class="tag">        <span class="attr">android:layout_width</span>=<span class="string">&quot;match_parent&quot;</span></span></span><br><span class="line"><span class="tag">        <span class="attr">android:layout_height</span>=<span class="string">&quot;50dp&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">FrameLayout</span>&gt;</span></span><br></pre></td></tr></table></figure></li>
</ol>
<hr>
<h2 id="组件控制-与-监听函数"><a href="#组件控制-与-监听函数" class="headerlink" title="组件控制 与 监听函数"></a>组件控制 与 监听函数</h2><ul>
<li>示例：<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">MainActivity</span> <span class="keyword">extends</span> <span class="title class_">AppCompatActivity</span> &#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">protected</span> <span class="keyword">void</span> <span class="title function_">onCreate</span><span class="params">(Bundle savedInstanceState)</span> &#123;</span><br><span class="line">        <span class="built_in">super</span>.onCreate(savedInstanceState);</span><br><span class="line">        setContentView(R.layout.activity_xxx);  <span class="comment">//设置activity</span></span><br><span class="line">        <span class="comment">// 为清除按钮绑定点击监听函数</span></span><br><span class="line">        <span class="type">Button</span> <span class="variable">btn</span> <span class="operator">=</span> findViewById(R.id.clear_btn);</span><br><span class="line">        btn.setOnClickListener(<span class="keyword">new</span> <span class="title class_">clearOnClickListener</span>());</span><br><span class="line">        <span class="comment">// findViewById(R.id.login_btn).setOnClickListener(new loginOnClickListener());  //绑定(简写)</span></span><br><span class="line">    &#125; <span class="comment">// end onCreate</span></span><br><span class="line">	</span><br><span class="line">    <span class="keyword">class</span> <span class="title class_">clearOnClickListener</span> <span class="keyword">implements</span> <span class="title class_">View</span>.OnClickListener &#123;  <span class="comment">// 自定义按钮点击事件监听类</span></span><br><span class="line">        <span class="comment">// static防止内存泄露，但在使用findViewById函数时不能用</span></span><br><span class="line">        <span class="meta">@Override</span></span><br><span class="line">        <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">onClick</span><span class="params">(View v)</span> &#123;</span><br><span class="line">            <span class="keyword">if</span>(((CheckBox)findViewById(R.id.cb_dontclearme)).isChecked())</span><br><span class="line">                ((TextView)findViewById(R.id.tv_print)).setText(output_str);</span><br><span class="line">            ((EditText)findViewById(R.id.et_pwd)).setText(<span class="string">&quot;&quot;</span>);  <span class="comment">// 清空密码编辑框(简写)</span></span><br><span class="line">            <span class="type">EditText</span> <span class="variable">et</span> <span class="operator">=</span> findViewById(R.id.et_username);</span><br><span class="line">            et.setText(<span class="string">&quot;&quot;</span>);  <span class="comment">// 清空用户名编辑框</span></span><br><span class="line">            et.setHint(<span class="string">&quot;请输入姓名&quot;</span>);  <span class="comment">// 设置提示信息</span></span><br><span class="line">        &#125; <span class="comment">// end onClick</span></span><br><span class="line">    &#125; <span class="comment">// end class</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li>
</ul>
<hr>
]]></content>
      <categories>
        <category>技术</category>
      </categories>
      <tags>
        <tag>Android</tag>
      </tags>
  </entry>
  <entry>
    <title>位运算与取模运算%</title>
    <url>/2021/08/22/Bit-operation-and-modular-operation%25/</url>
    <content><![CDATA[<p>在研究某大佬的代码时，突然发现了这样一条用来<strong>判断奇偶数</strong>的语句：</p>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="keyword">if</span>(x&amp;<span class="number">1</span>) &#123;...&#125;</span><br></pre></td></tr></table></figure>
<p>带着<del>想探究事物本质的好奇心</del> (想把代码变得高大上)，去搜了搜<code>取模运算%</code>和<code>按位与&amp;</code>的关系，<del>于是打开了新世界的大门</del>  <strong>(｢･ω･)｢</strong></p>
<ul>
<li>注：<code>位运算与&amp;</code>的效率要比<code>取模运算%</code>快<strong>10倍以上</strong></li>
</ul>
<hr>
<h2 id="位运算符简介"><a href="#位运算符简介" class="headerlink" title="位运算符简介"></a>位运算符简介</h2><p>与<code>&amp;</code>、或<code>|</code>、异或<code>^</code>、右移<code>&gt;&gt;</code>、左移<code>&lt;&lt; </code>，取反<code>~</code></p>
<h3 id="按位与-amp"><a href="#按位与-amp" class="headerlink" title="按位与 &amp;"></a>按位与 &amp;</h3><ul>
<li>0&amp;0&#x3D;0；  0&amp;1&#x3D;0；  1&amp;0&#x3D;0；  1&amp;1&#x3D;1；  简记为“<strong>同1则1</strong>”</li>
<li>应用：<ul>
<li>清零：x&amp;0</li>
<li><strong>取二进制数的某一位</strong>：例如取x&#x3D;10010110的右数第三位，则<code>x&amp;00000100 = 00000100</code>，说明x的右数第三位是1</li>
<li><strong>判断奇偶数</strong>代替<code>取模运算x%2==1</code>: <strong>奇数x&amp;1&#x3D;1，偶数x&amp;1&#x3D;0</strong>，效率更高</li>
</ul>
</li>
</ul>
<h3 id="按位或"><a href="#按位或" class="headerlink" title="按位或 |"></a>按位或 |</h3><ul>
<li>0|0&#x3D;0；  0|1&#x3D;1；  1|0&#x3D;1；  1|1&#x3D;1；  简记为“<strong>有1则1</strong>”</li>
<li>应用：<ul>
<li>使二进制数的某些位为1：例如使x&#x3D;10001000的右数第1,2位取1，则<code>x|00000011 = 10001011</code></li>
</ul>
</li>
</ul>
<h3 id="按位异或"><a href="#按位异或" class="headerlink" title="按位异或 ^"></a>按位异或 ^</h3><ul>
<li>0^0&#x3D;0；  0^1&#x3D;1；  1^0&#x3D;1；  1^1&#x3D;0；  简记为“<strong>同0异1</strong>”</li>
<li>自反性： <code>x^y^y = x  </code>；<code>x^0 = 0</code>；<code>x^x = 0</code></li>
<li>应用：<ul>
<li><strong>不利用中间变量</strong>实现<strong>变量值互换</strong>：  <figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="comment">//x = 3 = 0011  y = 5 = 0101</span></span><br><span class="line">x = x^y; <span class="comment">// x1 = (x^y=0110)</span></span><br><span class="line">y = x^y; <span class="comment">// y = (x1^y=0110^0101=0011=3)</span></span><br><span class="line">x = x^y; <span class="comment">// x = (x1^y1=0110^0011=0101=5) 交换完成</span></span><br></pre></td></tr></table></figure></li>
<li>特殊的数组筛选重复值：1~100放在长度为101的数组中，只有唯一的一个值重复，其它均只出现一次 -&gt; 将数组中的元素全部异或，再减去1-100的全部异或，即可得到重复的数值</li>
</ul>
</li>
</ul>
<h3 id="按位右移-gt-gt"><a href="#按位右移-gt-gt" class="headerlink" title="按位右移 &gt;&gt;"></a>按位右移 &gt;&gt;</h3><ul>
<li>将某数的二进制位全部右移指定位，相当于除以2^n^，正数左补0，负数左补1，右边移出去的位丢弃，例如<code>00100110&gt;&gt;2 = 00001001 即 38&gt;&gt;2 = 38/4 = 9（余数舍弃)</code></li>
</ul>
<h3 id="按位左移-lt-lt"><a href="#按位左移-lt-lt" class="headerlink" title="按位左移 &lt;&lt;"></a>按位左移 &lt;&lt;</h3><ul>
<li>将某数的二进制位全部左移指定位（<strong>当移出的位中不含1时，相当于乘以2^n^</strong>）右补0，左边移出去的位丢弃，例如<code>00001101&lt;&lt;2 = 00110100 即 13&lt;&lt;2 = 13*4 =52</code></li>
</ul>
<h3 id="按位取反"><a href="#按位取反" class="headerlink" title="按位取反 ~"></a>按位取反 ~</h3><ul>
<li>将某数的二进制位数全部取反，0变1，1变0，例如<code>~52 = ~00110100 = 11001011 = 203 = 255-52</code></li>
</ul>
<hr>
<h2 id="应用示例"><a href="#应用示例" class="headerlink" title="应用示例"></a>应用示例</h2><ol>
<li>防溢出求平均数：<code>(x+y)/2</code> ⇒ <code>(x&amp;y)+((x^y)&gt;&gt;1)</code></li>
<li>求绝对值： <figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="type">int</span> <span class="title function_">abs</span><span class="params">(<span class="type">int</span> x)</span> &#123; </span><br><span class="line">	<span class="type">int</span> y; </span><br><span class="line">	y = x &gt;&gt; <span class="number">31</span>; </span><br><span class="line">	<span class="keyword">return</span> (x^y)-y;  <span class="comment">//(x+y)^y </span></span><br><span class="line">&#125; </span><br></pre></td></tr></table></figure></li>
<li>替代部分条件语句：<code>if (x==a) x = b; else x = a;</code> ⇒ <code>x = (x==a ? b : a);</code> ⇒ <code>x = a ^ b ^ x;</code></li>
</ol>
<hr>
]]></content>
      <categories>
        <category>技术</category>
      </categories>
      <tags>
        <tag>C</tag>
        <tag>bit Operation</tag>
      </tags>
  </entry>
  <entry>
    <title>用Hexo搭建个人博客并部署到Github</title>
    <url>/2023/02/28/Blog-Built-with-Hexo&amp;Github/</url>
    <content><![CDATA[<p>若想部署到Gitee码云上，可以参考博客：<a href="https://blog.csdn.net/qq_46036214/article/details/110137239">在Gitee搭建属于自己的博客</a></p>
<p>若想部署到已有域名上，可以参考视频：<a href="https://www.bilibili.com/video/BV1Vg411w7os">1小时WordPress从0到1建站系列</a> </p>
<h2 id="准备"><a href="#准备" class="headerlink" title="准备"></a>准备</h2><p>下载 Git 和 Node.js 安装包，注册一个Github账号</p>
<p>Git：<a href="https://git-scm.com/downloads">Downloads | Git (git-scm.com)</a></p>
<p>Node.js：<a href="https://nodejs.org/en/download/">Download | Node.js (nodejs.org)</a></p>
<p>安装Git后，鼠标右键有 <code>Git Bash Here</code> 选项，点击打开Git终端，输入命令<code>git --version</code> 能看到版本号即安装成功</p>
<p>安装Node.js后，配置环境变量（在系统变量Path中添加Node.js目录即可），在Git终端中输入命令<code>node -v</code> 能看到版本号即安装成功</p>
<hr>
<h2 id="安装"><a href="#安装" class="headerlink" title="安装"></a>安装</h2><ol>
<li><p>在本地磁盘建个文件夹，用来放Hexo</p>
</li>
<li><p>进入文件夹，执行下方命令安装Hexo：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">npm install hexo -g</span><br></pre></td></tr></table></figure>
</li>
<li><p>输入命令<code>hexo -v</code> 能看到好多版本号即安装成功（若安装失败看最下面 问题1）</p>
</li>
<li><p>安装 git部署依赖：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">npm install --save hexo-deployer-git</span><br></pre></td></tr></table></figure>
</li>
<li><p>创建Github仓库（参考博客<a href="https://zhuanlan.zhihu.com/p/60578464">使用Hexo+GitHub 搭建个人免费博客教程</a>的 3.创建Github仓库 部分）</p>
<p>注意：如果你的Github用户名为<code>User</code>，仓库名(repository name)最好为 <code>User.github.io</code>，否则可能404，或Github Pages网址变奇怪，看评论区→<a href="https://zhuanlan.zhihu.com/p/28321740">三分钟在GitHub上搭建个人博客</a></p>
</li>
<li><p>部署 Hexo 到 GitHub Pages（参考博客<a href="https://zhuanlan.zhihu.com/p/60578464">使用Hexo+GitHub 搭建个人免费博客教程</a>的 5.部署 部分）</p>
<p>注：<strong>hexo-deployer-git</strong>已安装；<code>_config.yml</code>  文件在Hexo安装根目录，修改最下方deploy部分的repo内容为：<code>https://github.com/用户名/用户名.github.io.git</code>（仓库Clone代码的位置可以复制）；修改branch时，注意你的Github仓库分支是<code>main</code>还是<code>master</code></p>
</li>
<li><p>完成后打开Git终端运行命令：（使用Hexo相关命令报错 看最下方 问题2）</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">hexo clean</span><br><span class="line">hexo g</span><br><span class="line">hexo server</span><br></pre></td></tr></table></figure>

<p>进入本地浏览器打开<code>http://localhost:4000/</code>测试（回到终端，<code>Ctrl+C</code>退出）</p>
</li>
<li><p>输入下方命令进行部署：（超时或断联可以多试几次，或换用<code>npx hexo d</code>试试）</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">hexo d</span><br></pre></td></tr></table></figure>

<p>看到 <code>INFO  Deploy done: git</code> 表示部署完成</p>
</li>
<li><p>在浏览器输入 <code>https://用户名.github.io/</code> 即可访问个人博客啦</p>
</li>
</ol>
<hr>
<h2 id="博客优化"><a href="#博客优化" class="headerlink" title="博客优化"></a>博客优化</h2><h4 id="更换主题"><a href="#更换主题" class="headerlink" title="更换主题"></a>更换主题</h4><ol>
<li><p>进入Hexo安装根目录（能看到_config.yml文件）</p>
</li>
<li><p>下载ayer主题（以ayer主题为例，参考<a href="https://shen-yu.gitee.io/2019/ayer/">Ayer中文说明</a>）</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">git <span class="built_in">clone</span> https://github.com/Shen-Yu/hexo-theme-ayer.git themes/ayer</span><br></pre></td></tr></table></figure>
</li>
<li><p>配置根目录<code>_config.yml</code>文件，找到<code>theme</code>修改为<code>ayer</code>保存退出</p>
</li>
<li><p>依次执行命令<code>hexo clean</code>，<code>hexo g</code> ，<code>hexo d</code>更新部署即可</p>
</li>
</ol>
<h4 id="添加分类和标签"><a href="#添加分类和标签" class="headerlink" title="添加分类和标签"></a>添加分类和标签</h4><ol>
<li><p>进入Hexo根目录blog中，打开Git终端，执行以下命令生成分类页</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">hexo new page categories</span><br></pre></td></tr></table></figure>
</li>
<li><p>进入 .&#x2F;source&#x2F;categories&#x2F;中，打开<code>index.md</code>，添加 <code>type: &quot;categories&quot;</code>到内容中，示例结果如下所示：</p>
<figure class="highlight markdown"><table><tr><td class="code"><pre><span class="line">---</span><br><span class="line">title: 分类</span><br><span class="line">date: 2020-12-31 11:11:11</span><br><span class="line"><span class="section">type: &quot;categories&quot;</span></span><br><span class="line"><span class="section">---</span></span><br></pre></td></tr></table></figure>

<p>保存关闭文件</p>
</li>
<li><p>打开需要添加分类的文章，为其添加categories属性。下方的<code>categories: - 技术</code>表示添加这篇文章到 <code>技术</code> 这个分类，二级分类 <code>- web前端</code>表示添加这篇文章到 <code>技术</code>分类下的 <code>web前端</code>二级分类中（一篇文章不能属于多个同级分类）</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">---</span><br><span class="line">title: 标签</span><br><span class="line">date: 2020-12-31 12:12:12</span><br><span class="line">categories:</span><br><span class="line">- 技术</span><br><span class="line">- web前端</span><br><span class="line">---</span><br></pre></td></tr></table></figure>
</li>
<li><p>保存退出，依次执行命令<code>hexo clean</code>，<code>hexo g</code> ，<code>hexo d</code>更新即可</p>
</li>
<li><p>添加标签与添加分类过程类似，只需要把<code>categories</code>更换成<code>tags</code>即可（标签不存在层级关系，一篇文章可以属于多个标签）</p>
<p>注：多个tags的另一种写法：<code>tags: [tag1, tag2, tag3, ...]</code></p>
</li>
</ol>
<hr>
<h2 id="遇到问题及解决方案"><a href="#遇到问题及解决方案" class="headerlink" title="遇到问题及解决方案"></a>遇到问题及解决方案</h2><ul>
<li><p><b>问题1：安装Hexo报错 bash: hexo: command not found</b></p>
<p> 官网安装命令如下(一般第二句hexo会出问题)：</p>
 <figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">npm install hexo-cli -g</span><br><span class="line">hexo init blog</span><br><span class="line"><span class="built_in">cd</span> blog</span><br><span class="line">npm install</span><br><span class="line">hexo server</span><br></pre></td></tr></table></figure>

<p> 解决方案：进入文件夹，<code>Shift</code>+<code>鼠标右键</code>打开Powershell输入以下命令：</p>
 <figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">npx hexo init blog</span><br><span class="line">cd blog</span><br><span class="line">npm install</span><br><span class="line">npx hexo server</span><br></pre></td></tr></table></figure>

<p> 在本地浏览器打开<code>http://localhost:4000/</code>即可看到Hexo界面（回到终端，<code>Ctrl+C</code>退出）</p>
<p> （如果hexo相关命令找不到，可以尝试在命令首部加<code>npx</code>，即<code>npx hexo clean</code>等）</p>
</li>
<li><p><b>问题2：安装Hexo后使用Hexo相关命令报错 hexo: command not found</b></p>
<p> 在环境变量Path中添加 <code>Hexo安装路径\node_modules\hexo\bin</code>，重新打开Git终端即可</p>
</li>
</ul>
<hr>
<h2 id="参考文章"><a href="#参考文章" class="headerlink" title="参考文章"></a>参考文章</h2><p><a href="https://blog.csdn.net/The_X_One/article/details/106753814">使用hexo框架+ayer主题+gitalk评论插件搭建个人博客</a></p>
<p><a href="https://blog.csdn.net/qq_42893625/article/details/100852221">安装Hexo报错bash: hexo: command not found问题解决</a></p>
<p><a href="https://zhuanlan.zhihu.com/p/28321740">三分钟在GitHub上搭建个人博客</a></p>
<p><a href="https://www.cnblogs.com/chenlove/p/15058170.html">【保姆级】利用Github搭建自己的个人博客，看完就会</a></p>
<p><a href="https://zhuanlan.zhihu.com/p/60578464">使用 Hexo+GitHub 搭建个人免费博客教程（小白向）</a></p>
<p><a href="https://gitee.com/shen-yu/hexo-theme-ayer">hexo-theme-ayer: 一个安静且优雅的Hexo主题</a></p>
<p><a href="https://www.jianshu.com/p/e17711e44e00">Hexo使用攻略-添加分类及标签</a></p>
<p><a href="https://www.nickyam.com/tech/hexo-multi-tags.html">Hexo 多标签及分级目录设置方法举例</a></p>
<hr>
]]></content>
      <categories>
        <category>技术</category>
      </categories>
      <tags>
        <tag>Hexo</tag>
        <tag>Github</tag>
        <tag>Blog</tag>
      </tags>
  </entry>
  <entry>
    <title>Hexo博客优化</title>
    <url>/2023/03/15/Blog-Hexo-customization-optimization/</url>
    <content><![CDATA[<h4 id="网页图标"><a href="#网页图标" class="headerlink" title="网页图标"></a>网页图标</h4><p>SVG素材库：<a href="https://www.iconfont.cn/collections/detail?spm=a313x.7781069.0.da5a778a4&cid=43742">iconfont-阿里巴巴矢量图标库 - Food</a>；<a href="https://www.bilibili.com/read/cv17346758">其他icon网站呢？</a></p>
<p>参考：<a href="https://blog.csdn.net/qq_39181839/article/details/109477357">Hexo更换网页图标</a></p>
<p>Ayer主题原本的网页图标在<code>./themes/ayer/source/favicon.ico</code><br>修改 <code>./themes/ayer/_config.yml</code>中的<code>favicon</code>字段</p>
<figure class="highlight yml"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 网站图标</span></span><br><span class="line"><span class="attr">favicon:</span> <span class="string">/favicon.ico</span></span><br></pre></td></tr></table></figure>

<h4 id="友链"><a href="#友链" class="headerlink" title="友链"></a>友链</h4><p>在<code>./source/links</code>下新建文件夹<code>image</code>用于存放图片，修改<code>index.md</code></p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">link</span> <span class="attr">rel</span>=<span class="string">&quot;stylesheet&quot;</span> <span class="attr">type</span>=<span class="string">&quot;text/css&quot;</span> <span class="attr">href</span>=<span class="string">&quot;links.css&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">ul</span> <span class="attr">class</span>=<span class="string">&quot;allLinks&quot;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">li</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">img</span> <span class="attr">src</span>=<span class="string">&quot;./image/图片1.jpg&quot;</span> <span class="attr">alt</span>=<span class="string">&quot;图片描述1&quot;</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">&quot;友情链接地址1&quot;</span>&gt;</span>博客名1<span class="tag">&lt;/<span class="name">a</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">li</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">img</span> <span class="attr">src</span>=<span class="string">&quot;./image/图片2.png&quot;</span> <span class="attr">alt</span>=<span class="string">&quot;图片描述2&quot;</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">&quot;友情链接地址2&quot;</span>&gt;</span>博客名2<span class="tag">&lt;/<span class="name">a</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">ul</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br></pre></td></tr></table></figure>
<p>新建样式文件 <code>links.css</code></p>
<figure class="highlight css"><table><tr><td class="code"><pre><span class="line"><span class="selector-class">.allLinks</span> &#123;</span><br><span class="line">    <span class="attribute">display</span>: -webkit-flex; <span class="comment">/* Safari */</span></span><br><span class="line">    <span class="attribute">display</span>: flex;</span><br><span class="line">    <span class="attribute">flex-wrap</span>: wrap;</span><br><span class="line">    <span class="attribute">justify-content</span>: center;</span><br><span class="line">&#125;</span><br><span class="line"><span class="selector-class">.allLinks</span> <span class="selector-tag">li</span> &#123;</span><br><span class="line">    <span class="attribute">list-style</span>: none;</span><br><span class="line">    <span class="attribute">display</span>: inline-flex;</span><br><span class="line">    <span class="attribute">border-radius</span>: <span class="number">1rem</span>;</span><br><span class="line">    <span class="attribute">width</span>: <span class="number">20rem</span>;</span><br><span class="line">    <span class="attribute">height</span>: <span class="number">8rem</span>;</span><br><span class="line">    <span class="attribute">margin-top</span>: <span class="number">3rem</span>;</span><br><span class="line">    <span class="attribute">margin-right</span>:<span class="number">2rem</span>;</span><br><span class="line">    <span class="attribute">overflow</span>: hidden; <span class="comment">/*超出边界部分隐藏*/</span></span><br><span class="line">    <span class="attribute">background-color</span>: <span class="number">#ffffff</span>;  <span class="comment">/*卡片背景颜色*/</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="selector-class">.allLinks</span> <span class="selector-tag">li</span> <span class="selector-tag">img</span> &#123;</span><br><span class="line">    <span class="attribute">width</span>:<span class="number">6rem</span>;</span><br><span class="line">    <span class="attribute">height</span>:<span class="number">6rem</span>;</span><br><span class="line">    <span class="attribute">border-radius</span>: <span class="number">50%</span>;</span><br><span class="line">    <span class="attribute">margin</span>: <span class="number">1rem</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="selector-class">.allLinks</span> <span class="selector-tag">li</span> <span class="selector-tag">a</span> &#123;</span><br><span class="line">    <span class="attribute">width</span>: <span class="number">12rem</span>;</span><br><span class="line">    <span class="attribute">padding-top</span>: <span class="number">10%</span>;</span><br><span class="line">    <span class="attribute">text-align</span>: center;</span><br><span class="line">    <span class="attribute">cursor</span>: pointer;</span><br><span class="line">    <span class="attribute">text-decoration</span>: none;</span><br><span class="line">    <span class="attribute">font-size</span>: <span class="number">1.7rem</span>;</span><br><span class="line">    <span class="attribute">font-family</span>: <span class="string">&quot;Helvetica Neue&quot;</span>, Helvetica, <span class="string">&quot;PingFang SC&quot;</span>, <span class="string">&quot;Hiragino Sans GB&quot;</span>, <span class="string">&quot;Microsoft YaHei&quot;</span>, 微软雅黑, Arial, sans-serif;</span><br><span class="line">    <span class="attribute">color</span>:<span class="number">#000000</span>;  <span class="comment">/*文字颜色*/</span></span><br><span class="line">    <span class="attribute">word-wrap</span>: break-word; <span class="comment">/*文字换行*/</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>



<h4 id="2D看板娘"><a href="#2D看板娘" class="headerlink" title="2D看板娘"></a>2D看板娘</h4><p><a href="https://blog.csdn.net/u013467402/article/details/101443431">在hexo博客加上live2d看板娘</a><br><a href="https://github.com/EYHN/hexo-helper-live2d">live2d官网文档 - hexo-helper-live2d: Add the live2d to your hexo!</a></p>
<h4 id="站内搜索"><a href="#站内搜索" class="headerlink" title="站内搜索"></a>站内搜索</h4><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">npm install hexo-generator-searchdb --save</span><br></pre></td></tr></table></figure>
<p>在  hexo 根目录下 <code>_config.yml</code> 文件中添加：</p>
<figure class="highlight yml"><table><tr><td class="code"><pre><span class="line"><span class="comment"># hexo-generator-searchdb</span></span><br><span class="line"><span class="attr">search:</span></span><br><span class="line">  <span class="attr">path:</span> <span class="string">search.xml</span></span><br><span class="line">  <span class="attr">field:</span> <span class="string">post</span></span><br><span class="line">  <span class="attr">format:</span> <span class="string">html</span></span><br></pre></td></tr></table></figure>



<h4 id="评论系统"><a href="#评论系统" class="headerlink" title="评论系统"></a>评论系统</h4><ul>
<li>Valine + LeanCloud<br>参考：<a href="">Valine官方文档 - 快速、简洁且高效的无后端评论系统</a><br>如果使用 Ayer 主题，完成LeanCloud仓库创建后可以直接去<code>./theme/ayer/</code>路径下的<code>_config.yml</code>文件中键入<code>appID</code>和<code>appKey</code>，开启 LeanCloud 和 Valine功能，无需其他操作</li>
<li>Valine 评论背景</li>
</ul>
<figure class="highlight css"><table><tr><td class="code"><pre><span class="line">&lt;style&gt;</span><br><span class="line">  <span class="selector-class">.v</span><span class="selector-attr">[data-class=v]</span> <span class="selector-class">.veditor</span> &#123;</span><br><span class="line">    <span class="attribute">background-image</span>: <span class="built_in">url</span>(<span class="string">https://xxx.xxx/u_pic.png</span>);</span><br><span class="line">    <span class="attribute">background-size</span>: contain;</span><br><span class="line">    <span class="attribute">background-repeat</span>: no-repeat;</span><br><span class="line">    <span class="attribute">background-position</span>: right;</span><br><span class="line">    <span class="attribute">opacity</span>: <span class="number">0.05</span>;</span><br><span class="line">  &#125;</span><br></pre></td></tr></table></figure>



<h4 id="更改黑夜模式的背景黑度"><a href="#更改黑夜模式的背景黑度" class="headerlink" title="更改黑夜模式的背景黑度"></a>更改黑夜模式的背景黑度</h4><p>在 <code>./themes/ayer/source/dist</code>路径下的 <code>main.css</code> 中查找 <code>body.darkmode</code> 字段</p>
<p>将 <code>background:rgba(0,0,0,.6)</code> 的第四项透明度<code>.6</code> 修改为 <code>.8</code>(变黑)</p>
<h4 id="文章置顶"><a href="#文章置顶" class="headerlink" title="文章置顶"></a>文章置顶</h4><p>参考：<a href="https://blog.csdn.net/nineya_com/article/details/103394315">hexo博客文章置顶功能实现的两种方法</a></p>
<p>Ayer主题包含有文章置顶相关的配置，可以修改<code>./node_modules/hexo-generator-index/lib</code>路径下的<code>generator.js</code>文件</p>
<p>将原排序方式：<code>posts.data.sort((a,b) =&gt; (b.sticky||0)-(a.sticky||0));</code>，修改为：</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line">posts.<span class="property">data</span> = posts.<span class="property">data</span>.<span class="title function_">sort</span>(<span class="keyword">function</span>(<span class="params">a, b</span>) &#123;</span><br><span class="line">  <span class="keyword">if</span>(a.<span class="property">top</span> &amp;&amp; b.<span class="property">top</span>) &#123; <span class="comment">// 两篇文章都有top，top大的在前</span></span><br><span class="line">    <span class="keyword">if</span>(a.<span class="property">top</span> == b.<span class="property">top</span>) </span><br><span class="line">      <span class="keyword">return</span> b.<span class="property">date</span> - a.<span class="property">date</span>; <span class="comment">// 若top值相等，最新的文章在前面</span></span><br><span class="line">    <span class="keyword">else</span></span><br><span class="line"><span class="keyword">return</span> b.<span class="property">top</span> - a.<span class="property">top</span>; <span class="comment">// top大的在前面</span></span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">else</span> <span class="keyword">if</span>(a.<span class="property">top</span> &amp;&amp; !b.<span class="property">top</span>) &#123; <span class="keyword">return</span> -<span class="number">1</span>; &#125;  <span class="comment">// 以下是只有一篇文章top有定义，那么将有top的排在前面</span></span><br><span class="line">  <span class="keyword">else</span> <span class="keyword">if</span>(!a.<span class="property">top</span> &amp;&amp; b.<span class="property">top</span>) &#123; <span class="keyword">return</span> <span class="number">1</span>; &#125;</span><br><span class="line">  <span class="keyword">else</span> <span class="keyword">return</span> b.<span class="property">date</span> - a.<span class="property">date</span>; 	<span class="comment">//都没有top标签，最新的文章在前面</span></span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure>

<p>然后在需要置顶的文章首部，加入top属性即可，如:</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">---</span><br><span class="line">title: ...</span><br><span class="line">top: 10</span><br><span class="line">---</span><br></pre></td></tr></table></figure>





<hr>
<p>参考文章：</p>
<ul>
<li><p><a href="https://easyhexo.com/2-Theme-use-and-config/2-19-hexo-theme-ayer/">hexo-theme-ayer | Easy Hexo</a></p>
</li>
<li><p><a href="https://blog.justlovesmile.top/posts/c8972b63.html">Hexo博客搭建+Butterfly主题魔改指南</a></p>
</li>
<li><p><a href="https://blog.csdn.net/qq_43701912/article/details/107056483">Hexo博客 | 前端美化</a></p>
</li>
<li><p><a href="https://blog.csdn.net/qq_35982918/article/details/106728754">Hexo博客Ayer主题自定义配置</a></p>
</li>
<li><p><a href="https://blog.csdn.net/The_X_One/article/details/106753814">使用hexo框架+ayer主题+gitalk评论插件搭建个人博客</a> 的 优化部分</p>
</li>
<li><p><a href="https://zhuanlan.zhihu.com/p/69211731">Hexo 博客美化合集</a> 音乐外链 </p>
</li>
<li><p><a href="https://thinkingreedi.github.io/categories/%E5%8D%9A%E5%AE%A2/">会思想的苇草i 从0开始搭建博客</a></p>
</li>
</ul>
<hr>
]]></content>
      <categories>
        <category>技术</category>
      </categories>
      <tags>
        <tag>Hexo</tag>
        <tag>Blog</tag>
      </tags>
  </entry>
  <entry>
    <title>CSAPP 5.1 优化编译器的能力和局限性</title>
    <url>/2022/02/21/CSAPP-5.1-optimizes-compiler-capabilities-and-limitations/</url>
    <content><![CDATA[<h2 id="5-1-优化编译器的能力和局限性"><a href="#5-1-优化编译器的能力和局限性" class="headerlink" title="5.1 优化编译器的能力和局限性"></a>5.1 优化编译器的能力和局限性</h2><p>现代编译器运用复杂精细的算法来确定一个程序中计算的值，以及他们是被如何使用的，然后利用一些机会来简化表达式，如：在几个不同的地方使用同一个计算，以及降低一个给定的计算必须被执行的次数。大多数编译器，包括 GCC，向用户提供了一些对它们所使用的优化的控制。就像在第3章中讨论过的，最简单的控制就是指定<code>优先级别</code>。例如，以命令行选项 “-Og” 调用 GCC 是让 GCC 使用一组基本的优化。以选项 “-O1” 或更高(如 “-O2” 或 “-O3” ) 调用 GCC 会让他使用更多的优化，进一步提高程序的性能，但是也可能增加程序的规模，也可能使标准的调试工具更难对程序进行调试。</p>
<p>编译器必须很小心地对程序进行<code>安全</code>的优化，即对于程序可能遇到的所有可能的情况，在C语言标准提供的保证之下，优化后得到的程序和为优化的版本有一样的行为。这一限制消除了一些造成不希望的运行时行为的隐患，但是也意味着程序员要花费更多精力写出编译器能够将之转换成有效及其代码的程序。下面这个简单的例子帮助理解编译器优化限制：</p>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="type">void</span> <span class="title function_">twiddle1</span><span class="params">(<span class="type">long</span> *xp, <span class="type">long</span> *yp)</span> &#123;</span><br><span class="line">    *xp += *yp;</span><br><span class="line">    *xp += *yp;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="type">void</span> <span class="title function_">twiddle2</span><span class="params">(<span class="type">long</span> *xp, <span class="type">long</span> *yp)</span> &#123;</span><br><span class="line">	*xp += <span class="number">2</span>* *yp;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>twiddle1 和 twiddle2 两个函数“似乎”有相同的功能（把存储在指针yp指向的值两次加到指针xp所指的值上）。从另一个角度来看，函数 twiddle2 效率更高一些，它只要求三次内存引用（读*xp、读*yp、写*xp），而 twiddle1需要6次（重复twiddle2需要的内存引用操作两次）。因此，如果要编译器编译函数 twiddle1，我们认为基于 twiddle2 执行的计算能产生更有效的代码。.</p>
<p>不过，考虑到 xp 和 yp 指向同一地址（xp 和 yp相等）的情况，此时，函数 twiddle1 的结果使 xp 变为原来的 4 倍，函数 twiddle2 的结果使 xp 变为原来的 3 倍。编译器不知道 twiddle1 会在何种情况被调用，因此必须假设 xp 和 yp 可能会相等。因此，编译器不能产生 twiddle2 风格的代码作为 twiddle1 的优化版本。这种两个指针指向同一个内存地址的情况称为 <strong><code>memory aliasing</code>（内存别名使用）</strong>，这可能会造成一个主要的<code>妨碍优化</code>的因素，限制了可能的优化策略。</p>
<hr>
<p>第二个妨碍优化的因素是 <strong>函数调用</strong>。考虑下面这个示例：</p>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="type">long</span> <span class="title function_">f</span><span class="params">()</span>;</span><br><span class="line"></span><br><span class="line"><span class="type">long</span> <span class="title function_">func1</span><span class="params">()</span> &#123;</span><br><span class="line">	<span class="keyword">return</span> f()+f()+f()+f();</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="type">long</span> <span class="title function_">func2</span><span class="params">()</span> &#123;</span><br><span class="line">	<span class="keyword">return</span> <span class="number">4</span> * f();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>最初看上去两个函数实现的都是相同的功能，但是 func2() 只调用 f() 1次，而 func1() 调用 f() 4次。以func1() 作为源代码时，会很想产生 func2()  风格的代码。不过考虑下面 有关 f() 的代码：</p>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="type">long</span> counter = <span class="number">0</span>;</span><br><span class="line"></span><br><span class="line"><span class="type">long</span> <span class="title function_">f</span><span class="params">()</span> &#123;</span><br><span class="line">	<span class="keyword">return</span> counter++;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>这个函数有个“副作用”，他修改了全局程序状态的一部分，改变该函数的调用次数会改变程序的功能。假设开始时去全局变量 counter 的值设为0，调用 func1() 会返回 0+1+2+3&#x3D;6，而调用 func2()返回 4*0&#x3D;0。大多数编译器会试图判断一个函数是否有副作用，如果有，编译器会假设最坏的情况并保持所有的函数调用不变。反之，则会进行一定程度的优化。</p>
<hr>
<h3 id="用内联优化函数调用"><a href="#用内联优化函数调用" class="headerlink" title="用内联优化函数调用"></a>用内联优化函数调用</h3><p>包含函数函数调用的代码可以用 <strong><code>inline substitution</code>（内敛函数替换）</strong> 或者简称 <strong><code>inlining</code>（内联）</strong> 的过程进行优化，此时，将函数调用替换为函数体。下面是 func1() 的内联版代码：</p>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="comment">/* Result of inlining f in func1 */</span></span><br><span class="line"><span class="type">long</span> <span class="title function_">funclin</span><span class="params">()</span> &#123;</span><br><span class="line">    <span class="type">long</span> t = counter++;  <span class="comment">/* +0 */</span></span><br><span class="line">    t += counter++;      <span class="comment">/* +1 */</span></span><br><span class="line">    t += counter++;      <span class="comment">/* +2 */</span></span><br><span class="line">    t += counter++;      <span class="comment">/* +3 */</span></span><br><span class="line">    <span class="keyword">return</span> t;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>这样的转换即减少了函数调用的开销，也允许对展开的代码做进一步优化。例如，编译器可以统一funclin() 中对全局变量的更新，产生这个函数的一个优化版本：</p>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="comment">/* Optimization of inlined func1 code */</span></span><br><span class="line"><span class="type">long</span> <span class="title function_">funclopt</span><span class="params">()</span> &#123;</span><br><span class="line">	<span class="type">long</span> t = <span class="number">4</span> * counter + <span class="number">6</span>;</span><br><span class="line">	counter += <span class="number">4</span>;</span><br><span class="line">	<span class="keyword">return</span> t;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p> 对于这个特定的函数 f 的定义，上述代码重现了 func1 的行为。</p>
<p>最近版本的 GCC 会尝试进行这种形式的优化，可以用命令行选项<code>-finline</code>指示编译器，或者使用优化等级 “-O1” 或更高等级。但是目前 GCC 尝试在单个文件中定义的函数的内联，意味着它无法用于常见的情况（<strong>一组库函数在一个文件中被定义，在其他文件的函数中被调用</strong>）。</p>
<p>在某些情况下，最好能阻止编译器的内联优化。一种情况是 用符号调试器(如GDB)来评估代码，如果一个函数调用已经用内联替换优化过了，那么任何对这个调用进行追踪或设置断点的尝试都会失败。还有一种情况是用代码剖析的方式来评估程序性能，用内联替换消除的函数调用是不能被正确剖析的。</p>
<hr>
]]></content>
      <categories>
        <category>学习</category>
      </categories>
      <tags>
        <tag>CSAPP</tag>
      </tags>
  </entry>
  <entry>
    <title>Dev C++注释中文乱码问题及解决方法</title>
    <url>/2022/07/29/DevC++annotation-zh-CN-garbled-code-problem-and-solution/</url>
    <content><![CDATA[<h2 id="问题：打开文件时注释的中文部分为乱码"><a href="#问题：打开文件时注释的中文部分为乱码" class="headerlink" title="问题：打开文件时注释的中文部分为乱码"></a>问题：打开文件时注释的中文部分为乱码</h2><img src="https://img-blog.csdnimg.cn/94d35cf5abd3497db97067f79fcd61c8.png" style="zoom:67%;" />

<hr>
<h2 id="原因：Dev-C-的默认字符编码为ANSI，而打开的文件的编码不是ANSI"><a href="#原因：Dev-C-的默认字符编码为ANSI，而打开的文件的编码不是ANSI" class="headerlink" title="原因：Dev C++的默认字符编码为ANSI，而打开的文件的编码不是ANSI"></a>原因：Dev C++的默认字符编码为ANSI，而打开的文件的编码不是ANSI</h2><hr>
<h2 id="解决方法1：利用记事本修改文件编码"><a href="#解决方法1：利用记事本修改文件编码" class="headerlink" title="解决方法1：利用记事本修改文件编码"></a>解决方法1：利用记事本修改文件编码</h2><ol>
<li><p><b>右键点击需要打开的文件，点击 打开方式 -&gt; 记事本</b><br>如果<u> 打开方式 里没有 记事本，要在 <strong>选择其他应用</strong> 里找</u></p>
<img src="https://img-blog.csdnimg.cn/4778ad5ec22b40109547333eadc71abc.png" style="zoom:80%;" />
</li>
<li><p><b>点击菜单栏 文件 -&gt; 另存为</b></p>
<img src="https://img-blog.csdnimg.cn/c72c2db3974a4b59a935574e2de945a4.png" style="zoom: 80%;" />
</li>
<li><p><b>将编码修改为 ANSI，点击保存，覆盖原先的文件 或 另存为一个文件</b></p>
<img src="https://img-blog.csdnimg.cn/87c35da868794fab811d08cad882aaf4.png" style="zoom:80%;" /></li>
<li><p>用DevC++打开即可</p>
</li>
</ol>
<hr>
<h2 id="解决方法2：利用Notepad-修改文件编码"><a href="#解决方法2：利用Notepad-修改文件编码" class="headerlink" title="解决方法2：利用Notepad++修改文件编码"></a>解决方法2：利用Notepad++修改文件编码</h2><p><b>（需要先安装 <font color="red">Notepad++</font>）用Notepad++打开文件，点击 菜单栏 -&gt; Encoding -&gt; “Convert to ANSI”，保存文件，再次用Dev C++打开即可</b><br><img src="https://img-blog.csdnimg.cn/e48c9c2c119e4e15a8ef6ec7d56e9697.png" style="zoom: 80%;" /></p>
<hr>
]]></content>
      <categories>
        <category>技术</category>
      </categories>
      <tags>
        <tag>C++</tag>
        <tag>Dev C++</tag>
      </tags>
  </entry>
  <entry>
    <title>人工智能导论实验</title>
    <url>/2023/03/15/Experiment-on-Introduction-of-AI/</url>
    <content><![CDATA[<h3 id="实验1-基于A-算法的8数码问题求解"><a href="#实验1-基于A-算法的8数码问题求解" class="headerlink" title="实验1 基于A*算法的8数码问题求解"></a>实验1 基于A*算法的8数码问题求解</h3><p>问题描述：在3*3的棋盘中有8个数码（数字块）和一个空格，只有与空格相邻的数码能移动到空格位置。从初始状态以最小的步长移动到目标状态。</p>
<p>实验要求：参考A*算法核心代码，以8数码问题为例实现A*算法的求解程序。</p>
<p>实验内容：</p>
<p>1、基于参考代码，运行程序，并画出程序的总体流程图。自动统计并输出到达目标的总步数，自动记录并输出每次移动后open表与closed表的变化。<br>要求初始状态与目标状态分别为：</p>
<p><strong>流程图</strong>：<br><img src="C:\Users\18049\AppData\Roaming\Typora\typora-user-images\image-20230315092602103.png"></p>
<p><strong>Code（Python）</strong>：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> numpy <span class="keyword">as</span> np</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">State</span>:</span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">__init__</span>(<span class="params">self, state, directionFlag=<span class="literal">None</span>, parent=<span class="literal">None</span>, f=<span class="number">0</span></span>):</span><br><span class="line">        self.state = state</span><br><span class="line">        self.direction = [<span class="string">&#x27;up&#x27;</span>, <span class="string">&#x27;down&#x27;</span>, <span class="string">&#x27;right&#x27;</span>, <span class="string">&#x27;left&#x27;</span>]</span><br><span class="line">        <span class="keyword">if</span> directionFlag:</span><br><span class="line">            self.direction.remove(directionFlag)</span><br><span class="line">        self.parent = parent</span><br><span class="line">        self.f = f</span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">getDirection</span>(<span class="params">self</span>):</span><br><span class="line">        <span class="keyword">return</span> self.direction</span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">setF</span>(<span class="params">self, f</span>):</span><br><span class="line">        self.f = f</span><br><span class="line">        <span class="keyword">return</span></span><br><span class="line"></span><br><span class="line">    <span class="comment"># 获取0点</span></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">getZeroPos</span>(<span class="params">self</span>):</span><br><span class="line">        postion = np.where(self.state == <span class="number">0</span>)</span><br><span class="line">        <span class="keyword">return</span> postion</span><br><span class="line"></span><br><span class="line">    <span class="comment"># 曼哈顿距离  f = g + h，g=1，如果用宽度优先的评估函数可以不调用该函数</span></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">getFunctionValue</span>(<span class="params">self</span>):</span><br><span class="line">        cur_node = self.state.copy()</span><br><span class="line">        fin_node = self.answer.copy()</span><br><span class="line">        dist = <span class="number">0</span></span><br><span class="line">        N = <span class="built_in">len</span>(cur_node)</span><br><span class="line"></span><br><span class="line">        <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(N):</span><br><span class="line">            <span class="keyword">for</span> j <span class="keyword">in</span> <span class="built_in">range</span>(N):</span><br><span class="line">                <span class="keyword">if</span> cur_node[i][j] != fin_node[i][j]:</span><br><span class="line">                    <span class="comment"># 启发函数1: 取当前状态位置与目标状态不符的数码数目</span></span><br><span class="line">                    <span class="comment"># dist = dist + 1</span></span><br><span class="line"></span><br><span class="line">                    <span class="comment"># 计算距离综合(启发函数 2, 3)</span></span><br><span class="line">                    index = np.argwhere(fin_node == cur_node[i][j])</span><br><span class="line">                    x = index[<span class="number">0</span>][<span class="number">0</span>]  <span class="comment"># 最终x距离</span></span><br><span class="line">                    y = index[<span class="number">0</span>][<span class="number">1</span>]  <span class="comment"># 最终y距离</span></span><br><span class="line">                    <span class="comment"># 启发函数2: 计算距离总和，使用曼哈顿算法</span></span><br><span class="line">                    dist += (<span class="built_in">abs</span>(x - i) + <span class="built_in">abs</span>(y - j))</span><br><span class="line">                    <span class="comment"># 启发函数3: 计算距离总和，使用欧几里得算法</span></span><br><span class="line">                    <span class="comment"># dist += ((x - i) ** 2 + (y - j) ** 2) ** 0.5</span></span><br><span class="line">        <span class="keyword">return</span> dist + <span class="number">1</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">nextStep</span>(<span class="params">self</span>):</span><br><span class="line">        <span class="keyword">if</span> <span class="keyword">not</span> self.direction:</span><br><span class="line">            <span class="keyword">return</span> []</span><br><span class="line">        subStates = []</span><br><span class="line">        boarder = <span class="built_in">len</span>(self.state) - <span class="number">1</span></span><br><span class="line">        x, y = self.getZeroPos()  <span class="comment"># 获取0点位置</span></span><br><span class="line">        <span class="comment"># 向左</span></span><br><span class="line">        <span class="keyword">if</span> <span class="string">&#x27;left&#x27;</span> <span class="keyword">in</span> self.direction <span class="keyword">and</span> y &gt; <span class="number">0</span>:</span><br><span class="line">            s = self.state.copy()</span><br><span class="line">            tmp = s[x, y - <span class="number">1</span>]</span><br><span class="line">            s[x, y - <span class="number">1</span>] = s[x, y]</span><br><span class="line">            s[x, y] = tmp</span><br><span class="line">            news = State(s, directionFlag=<span class="string">&#x27;right&#x27;</span>, parent=self)</span><br><span class="line">            news.setF(news.getFunctionValue())</span><br><span class="line">            subStates.append(news)</span><br><span class="line">        <span class="comment"># 向上</span></span><br><span class="line">        <span class="keyword">if</span> <span class="string">&#x27;up&#x27;</span> <span class="keyword">in</span> self.direction <span class="keyword">and</span> x &gt; <span class="number">0</span>:</span><br><span class="line">            <span class="comment"># it can move to upper place</span></span><br><span class="line">            s = self.state.copy()</span><br><span class="line">            tmp = s[x - <span class="number">1</span>, y]</span><br><span class="line">            s[x - <span class="number">1</span>, y] = s[x, y]</span><br><span class="line">            s[x, y] = tmp</span><br><span class="line">            news = State(s, directionFlag=<span class="string">&#x27;down&#x27;</span>, parent=self)</span><br><span class="line">            news.setF(news.getFunctionValue())</span><br><span class="line">            subStates.append(news)</span><br><span class="line">        <span class="comment"># 向下</span></span><br><span class="line">        <span class="keyword">if</span> <span class="string">&#x27;down&#x27;</span> <span class="keyword">in</span> self.direction <span class="keyword">and</span> x &lt; boarder:</span><br><span class="line">            <span class="comment"># it can move to down place</span></span><br><span class="line">            s = self.state.copy()</span><br><span class="line">            tmp = s[x + <span class="number">1</span>, y]</span><br><span class="line">            s[x + <span class="number">1</span>, y] = s[x, y]</span><br><span class="line">            s[x, y] = tmp</span><br><span class="line">            news = State(s, directionFlag=<span class="string">&#x27;up&#x27;</span>, parent=self)</span><br><span class="line">            news.setF(news.getFunctionValue())</span><br><span class="line">            subStates.append(news)</span><br><span class="line">        <span class="comment"># 向右</span></span><br><span class="line">        <span class="keyword">if</span> self.direction.count(<span class="string">&#x27;right&#x27;</span>) <span class="keyword">and</span> y &lt; boarder:</span><br><span class="line">            <span class="comment"># it can move to right place</span></span><br><span class="line">            s = self.state.copy()</span><br><span class="line">            tmp = s[x, y + <span class="number">1</span>]</span><br><span class="line">            s[x, y + <span class="number">1</span>] = s[x, y]</span><br><span class="line">            s[x, y] = tmp</span><br><span class="line">            news = State(s, directionFlag=<span class="string">&#x27;left&#x27;</span>, parent=self)</span><br><span class="line">            news.setF(news.getFunctionValue())</span><br><span class="line">            subStates.append(news)</span><br><span class="line">        <span class="comment"># 返回F值最小的下一个点</span></span><br><span class="line">        subStates.sort(key=compareNum)</span><br><span class="line">        <span class="keyword">return</span> subStates</span><br><span class="line"></span><br><span class="line">    <span class="comment"># 横向打印结果</span></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">showInfoHorizontally</span>(<span class="params">self, table, sep=<span class="string">&quot;  &quot;</span></span>):</span><br><span class="line">        <span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="string">        :param table: 需要显示的open|close表或者状态转移路径</span></span><br><span class="line"><span class="string">        :param sep: 显示的状态之间的间隔符号, 默认值为两个空格符</span></span><br><span class="line"><span class="string">        &quot;&quot;&quot;</span></span><br><span class="line">        <span class="keyword">if</span> table:</span><br><span class="line">            <span class="keyword">for</span> item <span class="keyword">in</span> table:</span><br><span class="line">                <span class="keyword">for</span> j <span class="keyword">in</span> <span class="built_in">range</span>(<span class="built_in">len</span>(item.state)):</span><br><span class="line">                    <span class="built_in">print</span>(item.state[<span class="number">0</span>, j], end=<span class="string">&#x27; &#x27;</span>)</span><br><span class="line">                <span class="built_in">print</span>(<span class="string">&quot;  &quot;</span>, end=<span class="string">&#x27;&#x27;</span>)</span><br><span class="line">            <span class="built_in">print</span>(<span class="string">&quot;\n&quot;</span>, end=<span class="string">&#x27;&#x27;</span>)</span><br><span class="line">            <span class="keyword">for</span> item <span class="keyword">in</span> table:</span><br><span class="line">                <span class="keyword">for</span> j <span class="keyword">in</span> <span class="built_in">range</span>(<span class="built_in">len</span>(item.state)):</span><br><span class="line">                    <span class="built_in">print</span>(item.state[<span class="number">1</span>, j], end=<span class="string">&#x27; &#x27;</span>)</span><br><span class="line">                <span class="built_in">print</span>(sep, end=<span class="string">&#x27;&#x27;</span>)</span><br><span class="line">            <span class="built_in">print</span>(<span class="string">&quot;\n&quot;</span>, end=<span class="string">&#x27;&#x27;</span>)</span><br><span class="line">            <span class="keyword">for</span> item <span class="keyword">in</span> table:</span><br><span class="line">                <span class="keyword">for</span> j <span class="keyword">in</span> <span class="built_in">range</span>(<span class="built_in">len</span>(item.state)):</span><br><span class="line">                    <span class="built_in">print</span>(item.state[<span class="number">2</span>, j], end=<span class="string">&#x27; &#x27;</span>)</span><br><span class="line">                <span class="built_in">print</span>(<span class="string">&quot;  &quot;</span>, end=<span class="string">&#x27;&#x27;</span>)</span><br><span class="line">            <span class="built_in">print</span>(<span class="string">&quot;\n&quot;</span>, end=<span class="string">&#x27;&#x27;</span>)</span><br><span class="line"></span><br><span class="line">    <span class="comment"># A* 迭代</span></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">solve</span>(<span class="params">self</span>):</span><br><span class="line">        <span class="comment"># openList</span></span><br><span class="line">        openTable = []</span><br><span class="line">        <span class="comment"># closeList</span></span><br><span class="line">        closeTable = []</span><br><span class="line">        openTable.append(self)</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&quot;_______初始状态______\nopenTable:&quot;</span>)</span><br><span class="line">        self.showInfoHorizontally(openTable)</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&quot;closeTable: len =&quot;</span>, <span class="built_in">len</span>(closeTable), <span class="string">&quot;\n&quot;</span>, end=<span class="string">&#x27;&#x27;</span>)</span><br><span class="line">        self.showInfoHorizontally(closeTable)</span><br><span class="line">        <span class="keyword">while</span> <span class="built_in">len</span>(openTable) &gt; <span class="number">0</span>:</span><br><span class="line">            n = openTable.pop(<span class="number">0</span>)  <span class="comment"># 下一步的点移除open</span></span><br><span class="line">            closeTable.append(n)  <span class="comment"># 加入close</span></span><br><span class="line">            subStates = n.nextStep()  <span class="comment"># 确定下一步点</span></span><br><span class="line">            path = []</span><br><span class="line">            optimal_state = subStates[<span class="number">0</span>]</span><br><span class="line">            <span class="keyword">if</span> (optimal_state.state == optimal_state.answer).<span class="built_in">all</span>():</span><br><span class="line">                <span class="keyword">while</span> optimal_state.parent <span class="keyword">and</span> optimal_state.parent != originState:</span><br><span class="line">                    path.append(optimal_state.parent)  <span class="comment"># 寻找父节点,回溯路径</span></span><br><span class="line">                    optimal_state = optimal_state.parent</span><br><span class="line">                path.reverse()  <span class="comment"># 将路径链表翻转即为来时的路径</span></span><br><span class="line">                <span class="keyword">return</span> path</span><br><span class="line">            openTable = openTable + subStates  <span class="comment"># 合并原open表和拓展节点列表</span></span><br><span class="line">            openTable.sort(key=compareNum)  <span class="comment"># 重新排序</span></span><br><span class="line"></span><br><span class="line">            <span class="comment"># 输出显示open表</span></span><br><span class="line">            <span class="built_in">print</span>(<span class="string">&quot;--------------------\nopenTable:&quot;</span>)</span><br><span class="line">            self.showInfoHorizontally(openTable)</span><br><span class="line">            <span class="comment"># 输出显示close表</span></span><br><span class="line">            <span class="built_in">print</span>(<span class="string">&quot;closeTable: len =&quot;</span>, <span class="built_in">len</span>(closeTable), <span class="string">&quot;\n&quot;</span>, end=<span class="string">&#x27;&#x27;</span>)</span><br><span class="line">            self.showInfoHorizontally(closeTable)</span><br><span class="line">        <span class="keyword">else</span>:</span><br><span class="line">            <span class="keyword">return</span> <span class="literal">None</span>, <span class="literal">None</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">compareNum</span>(<span class="params">state</span>):</span><br><span class="line">    <span class="keyword">return</span> state.f</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">&#x27;__main__&#x27;</span>:</span><br><span class="line">    originState = State(np.array([[<span class="number">2</span>, <span class="number">8</span>, <span class="number">3</span>], [<span class="number">1</span>, <span class="number">6</span>, <span class="number">4</span>], [<span class="number">7</span>, <span class="number">0</span>, <span class="number">5</span>]]))  <span class="comment"># 初始状态</span></span><br><span class="line">    State.answer = np.array([[<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>], [<span class="number">8</span>, <span class="number">0</span>, <span class="number">4</span>], [<span class="number">7</span>, <span class="number">6</span>, <span class="number">5</span>]])  <span class="comment"># 目标状态</span></span><br><span class="line">    s1 = State(state=originState.state)</span><br><span class="line">    path = s1.solve()</span><br><span class="line">    <span class="keyword">if</span> path:</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&quot;\n\nPath:&quot;</span>)  <span class="comment"># 显示路径</span></span><br><span class="line">        State.showInfoHorizontally(<span class="literal">None</span>, path, <span class="string">&quot;-&gt;&quot;</span>)</span><br><span class="line">        <span class="built_in">print</span>(State.answer)</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&quot;Total steps is %d&quot;</span> % <span class="built_in">len</span>(path))</span><br><span class="line"></span><br></pre></td></tr></table></figure>
<p><strong>open表、close表、path输出截图：</strong></p>
<p>略</p>
<p>2、设计两种新的启发式函数，并运行程序。对包含示例在内的3种启发式函数的特点与结果进行对比分析。</p>
<p><strong>启发函数1</strong>：采用曼哈顿算法计算距离总和，dist +&#x3D;|x-i|+|y-j|，结果参见实验内容1。</p>
<p><strong>启发函数2</strong>：采用欧式算法计算距离总和，即dist +&#x3D;√((x-i)^2+(y-j)^2)。</p>
<p><strong>启发函数3</strong>：取当前状态位置与目标状态不符的数码数目。</p>
<p>综上，对于实验一中的初始状态和目标状态，三种启发函数路径相同，过程（每次循环的open表和close表）不完全相同。</p>
<p>另外，当初始状态为[[1, 5, 3], [2, 4, 6], [7, 0, 8]]，目标状态为[[1, 2, 3], [4, 5, 6], [7, 8, 0]]时，</p>
<p><strong>启发函数1</strong>（曼哈顿算法计算距离）：</p>
<p><strong>启发函数2</strong>（欧式算法计算距离）：循环3000多次未果，程序被手动终止。</p>
<p><strong>启发函数3</strong>（取当前状态位置与目标状态不符的数码数目）：</p>
<p><strong>特点：</strong></p>
<p>启发函数1的曼哈顿距离比较适合四方向（上下左右）网格地图。</p>
<p>启发函数2的欧式距离比较适合可以任意方向移动的地图。</p>
<p>启发函数3的取当前状态位置与目标状态不符的数码数目比较简单。</p>
<hr>
<p>相关文章：</p>
<ol>
<li><a href="https://blog.csdn.net/Pericles_HAT/article/details/115516204">八数码难题(下): 启发式搜索(Python实现)</a>  有形象的图示</li>
<li><a href="https://blog.csdn.net/bob595078694/article/details/123362253">启发函数 (Heuristic Function)</a> 几种启发函数和搜索算法的理论对比</li>
<li><a href="https://blog.csdn.net/qq_63708623/article/details/129480238">python八数码问题 启发式搜索(Python实现)</a>包含三种启发函数（字符串距离、曼式距离、欧式距离）</li>
<li><a href="https://blog.csdn.net/SZU_Kwong/article/details/105897291">用两种启发函数的A*算法解决八数码问题(C++实现)</a> 两种启发函数（移位计数、欧氏距离）</li>
<li><a href="https://blog.csdn.net/Big_xbc/article/details/116206930">人工智能-八数码问题-启发式搜索(C++实现)</a> 某校实验报告？？有流程图</li>
</ol>
<hr>
]]></content>
      <categories>
        <category>学习</category>
      </categories>
      <tags>
        <tag>A-Star</tag>
      </tags>
  </entry>
  <entry>
    <title>计算机组成原理实验</title>
    <url>/2022/01/07/Experiment-on-Principles-of-Computer-Composition/</url>
    <content><![CDATA[<h3 id="实验一-静态随机存储器实验"><a href="#实验一-静态随机存储器实验" class="headerlink" title="实验一 静态随机存储器实验"></a>实验一 静态随机存储器实验</h3><h4 id="1-1-实验目的及内容"><a href="#1-1-实验目的及内容" class="headerlink" title="1.1 实验目的及内容"></a>1.1 实验目的及内容</h4><p><strong>实验目的</strong>：掌握静态随机存储器RAM工作特性及数据的读写方法</p>
<p><strong>仪器设备</strong>：PC机一台，TD-CMA实验系统一套</p>
<p><strong>实验内容</strong>：</p>
<img src="https://s1.ax1x.com/2023/03/17/ppGSz8A.jpg" style="zoom:25%;" />

<h4 id="1-2-实验步骤"><a href="#1-2-实验步骤" class="headerlink" title="1.2 实验步骤"></a>1.2 实验步骤</h4><blockquote>
<p>(1) 关闭实验系统电源，连接实验电路，并检查无误<br>(2) 将时序与操作台单元的开关KK1，KK3置为运行档，开关KK2置为”单步”档，开关KK4置为”主存”档<br>(3) 将CON单元的IOR开关置1，打开电源开关（如果听到“嘀”的报警声，应立即关闭电源，重新检查接线直到错误排除）<br>(4) 给存储器的00H,01H,02H,03H,04H地址单元中分别写入数据11H,12H,13H,14H,15H。<br>(5) 依次读出第00,01,02,03,04号单元中的内容，观察上述单元中内容是否与前面输入的一致</p>
</blockquote>
<p>上述 (4) 具体操作：</p>
<blockquote>
<p>① 写地址：在IN单元处输入地址，IOR置“0”，LDAR置“1”，按一下“ST”，将地址传至地址总线处，LDAR置“0”恢复至初态<br>② 写数据：IOR置“1”，在IN单元处输入数据，后IOR置“0”<br>WR置“1”，按下“ST”，写入数据，WR置“0”，IOR置“1”释放总线<br>重复上述步骤，依次在5个地质单元中写入对应数据即可。</p>
</blockquote>
<p>上述 (5) 具体操作：</p>
<blockquote>
<p>① 写地址：IOR置“1”，在IN单元处输入待读取的地址，IOR置“0”，LDAR置“1”，按下“ST”，然后LDAR置“0”恢复初态，IOR置“1”<br>② 读数据：RD置“1”（此时IOR应为“1”，LDAR置”0“）观察总线显示数，观察后RD置“0”释放总线</p>
</blockquote>
<h4 id="1-3-实验结果分析"><a href="#1-3-实验结果分析" class="headerlink" title="1.3 实验结果分析"></a>1.3 实验结果分析</h4><p>实验结果：</p>
<blockquote>
<p>在存储器的00H,01H,02H,03H,04H地址单元中分别读取出的数据为11H,12H,13H,14H,15H。</p>
</blockquote>
<p>结果分析：</p>
<blockquote>
<p>以01H地址单元写入数据12H并读出的过程为例<br>(1) 首先地址和数据是由同一个数据开关给出的（实验箱IN单元）因此地址和数据要分别写入。先关掉存储器的读写，数据开关给出地址01H，将地址01H打入AR中，再关闭地址寄存器，数据开关给出数据12H，打开输入三态门(写状态)，即把12H传至存储器。<br>读数据也应该先给出地址，在进行读操作，地址01H的写入方式相同，关闭IN单元输出，使存储器处于读状态，此时CPU总线上显示12H。<br>(2) 存储器存储数据原理：<br>存储器中最小单元为一个双稳态半导体电路或CMOS晶体管，磁性材料的存储单元，它可以存储一个二进制数序列，若干存储元构成一个存储单元，若干存储单元构成存储器，可用于存放数据。</p>
</blockquote>
<h4 id="1-4-思考题"><a href="#1-4-思考题" class="headerlink" title="1.4 思考题"></a>1.4 思考题</h4><ul>
<li>思考题1：存储器实验各个控制信号的初始状态如何设置？<br><strong>IOR 置 “1”，其他控制信号置 “0”</strong></li>
<li>思考题2：所有的写操作要配合脉冲（边沿触发），为什么？<br><strong>为了防止误操作</strong></li>
</ul>
<h3 id="实验三-基本运算器实验"><a href="#实验三-基本运算器实验" class="headerlink" title="实验三 基本运算器实验"></a>实验三 基本运算器实验</h3><h4 id="3-1-实验目的及内容"><a href="#3-1-实验目的及内容" class="headerlink" title="3.1 实验目的及内容"></a>3.1 实验目的及内容</h4><img src="https://s1.ax1x.com/2023/03/17/ppGpSgI.jpg" style="zoom:25%;" />

<h4 id="3-2-实验步骤"><a href="#3-2-实验步骤" class="headerlink" title="3.2 实验步骤"></a>3.2 实验步骤</h4><blockquote>
<p>（1）关闭电源开关，连接实验电路，并检查无误<br>（2）将时序与操作台单元的开关KK2 置为“单步”档，开关KK1, KK3置为“运行”档<br>（3）打开电源开关，按动 CON单元 的 CLR按钮，将运算器的 A,B,FC,FZ 清零<br>（4）用输入开关向暂存器A 置数<br>（5）用输入开关向暂存器B 置数<br>（6）改变运算器的功能设置，观察运算器的输出</p>
</blockquote>
<h4 id="3-3-实验结果分析"><a href="#3-3-实验结果分析" class="headerlink" title="3.3 实验结果分析"></a>3.3 实验结果分析</h4><blockquote>
<p>（1）运算器能实现二进制算术和移位，逻辑运算<br>设置运算器的控制信号S_3, S_2, S_1, S_0, C_n 来选择运算器的不同功能<br>（2）数据的输入，输出以及 FC、FZ 标志状态要通过 LED观察灯 观察时<br>都需要按下脉冲单元的 ST按钮<br>（3）数据进入哪一寄存器就必须开启哪一个寄存器<br>如数据只进入暂存器A，必须设置LDA &#x3D; 1， LDB &#x3D; 0且获得脉冲信号</p>
</blockquote>
<h4 id="3-4-思考题"><a href="#3-4-思考题" class="headerlink" title="3.4 思考题"></a>3.4 思考题</h4><ul>
<li>思考题3：采用单步模式时，实验箱是如何产生时序信号的？例如要产生T3需要按几次ST?<br><strong>按ST产生时序信号；单步模式下要产生T3需要按1次ST</strong></li>
<li>思考题4：运算器实验中的FZ代表什么含义？FZ什么时候取值为1？<br><strong>FZ为零标志位（Flag Zero），表示运算是否为0，当运算结果为0时，FZ为1</strong></li>
</ul>
<h3 id="Acknowledgement"><a href="#Acknowledgement" class="headerlink" title="Acknowledgement"></a>Acknowledgement</h3><blockquote>
<p>感谢一只路过的喵喵提供了相关照片、思考题的参考答案以及改正建议</p>
</blockquote>
<hr>
]]></content>
      <categories>
        <category>学习</category>
      </categories>
      <tags>
        <tag>计组</tag>
      </tags>
  </entry>
  <entry>
    <title>GitHub入门</title>
    <url>/2023/03/07/GitHub-Introduction/</url>
    <content><![CDATA[<p><a href="https://bbs.huaweicloud.com/blogs/336763">开发中时常提到的提交pr的意思: pull request</a></p>
<hr>
]]></content>
      <categories>
        <category>技术</category>
      </categories>
      <tags>
        <tag>GitHub</tag>
      </tags>
  </entry>
  <entry>
    <title>前端工具(框架)</title>
    <url>/2023/03/07/Front-end-tools/</url>
    <content><![CDATA[<p><a href="https://element.eleme.cn/#/zh-CN">Element - 网站快速成型工具</a></p>
<p><a href="http://www.quasarchs.com/">Quasar Framework</a></p>
<p><a href="https://zhuanlan.zhihu.com/p/142346630">UI框架 Quasar Framework 简评 - 知乎</a></p>
<hr>
<h3 id="html操作"><a href="#html操作" class="headerlink" title="html操作"></a>html操作</h3><p><a href="https://www.php.cn/div-tutorial-410402.html">html字体颜色设置的三种方法(font标签, 内置css-style, 引入外部css)</a></p>
<h3 id="CSS操作"><a href="#CSS操作" class="headerlink" title="CSS操作"></a>CSS操作</h3><p><a href="https://tool.lu/css/">CSS在线工具(格式化, 去注释, 整理, 压缩)</a></p>
<p><a href="https://blog.csdn.net/mygoes/article/details/116238484">VSCode插件实现 CSS自动梳理</a></p>
<h3 id="调色"><a href="#调色" class="headerlink" title="调色"></a>调色</h3><p><a href="https://www.sojson.com/web/online.html">在线调色板</a></p>
]]></content>
      <tags>
        <tag>front-end</tag>
      </tags>
  </entry>
  <entry>
    <title>IDEA生成可执行jar包及常见问题与解决</title>
    <url>/2022/11/27/IDEA-generates-executable-JAR-packages/</url>
    <content><![CDATA[<h3 id="打包过程"><a href="#打包过程" class="headerlink" title="打包过程"></a>打包过程</h3><ol>
<li>进入需要打包的项目，选择 <strong>最上方菜单栏的 File → Project Structure</strong></li>
</ol>
  <img src="https://s1.ax1x.com/2023/03/17/ppGSXUe.png" style="zoom:67%;" />

<ol start="2">
<li>选择 左侧菜单栏 <strong>Artifacts → + (加号) → JAR → from modules with dependencies</strong></li>
</ol>
  <img src="https://s1.ax1x.com/2023/03/17/ppGSj4H.png" style="zoom:67%;" />

<ol start="3">
<li><p>选择入口类 <strong>Main Class</strong>（点击文件夹图标可以快速选择），点击 <strong>OK</strong></p>
 <img src="https://s1.ax1x.com/2023/03/17/ppGSqHO.png" style="zoom:67%;" />
</li>
<li><p>返回到IDEA主界面，选择 最上方菜单栏 <strong>Build → Build Artifacts</strong>，再选择 <strong>Build 或 Rebuild</strong> 即可</p>
<img src="https://s1.ax1x.com/2023/03/17/ppGSbDK.png" style="zoom:67%;" /></li>
<li><p>生成的Jar包 在 <strong>左侧文件列表 out&#x2F;artifacts&#x2F;xxx_jar</strong>文件夹下</p>
<img src="https://s1.ax1x.com/2023/03/17/ppGSHu6.png" style="zoom:67%;" /></li>
<li><p>在控制台执行下面命令 运行jar包进行测试</p>
 <figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">java -jar C:/xxx/xxx.jar</span><br></pre></td></tr></table></figure></li>
</ol>
<hr>
<h3 id="可能遇到的问题"><a href="#可能遇到的问题" class="headerlink" title="可能遇到的问题"></a>可能遇到的问题</h3><ul>
<li>问题1：<strong>运行jar包时，报错 Error: A JNI error has occurred, please check your installation and try again</strong><br>  解决：在控制台运行 java -version 和 javac -version 命令查看两个java版本是否一样，<del>如果一样我就不知道了欸嘿</del>，如果不一样，则需要在系统环境变量里修改（具体参照问题2），修改后重启控制台，运行上述命令检查<br>  （<strong>重要</strong>）检查无误后，进入IDEA界面，在 <strong>File → Project Structure</strong> 中，选择<strong>环境变量对应版本</strong>的<strong>Project SDK 和 language level</strong>，<strong>重新build程序（上面步骤4）</strong> 即可</li>
</ul>
<p>​	<img src="https://s1.ax1x.com/2023/03/17/ppGSOED.png" style="zoom:67%;" /></p>
<ul>
<li>问题2：<b>‘javac’不是内部或外部命令，也不是可运行的程序</b><br>解决：系统环境变量配置错误，检查环境变量中JAVA_HOME（应为 jdk安装的路径，如 D:\Java\jdk1.8.0_261） 和 Path（应为 %JAVA_HOME%\bin ）的内容，之后重启控制台运行 java -version 和 javac -version 检查，再执行问题一的最后一步更改IDEA的项目配置</li>
<li>问题3：<strong>打完jar包后，不能正常读取原路径存在的文件</strong><br>解决：将 <code>原路径</code> 修改为 <code>System.getProperty(&quot;user.dir&quot;) +  jar包到文件的路径</code>，其中 <code>System.getProperty(&quot;user.dir&quot;)</code>为运行jar文件时jar包的位置，也是程序源位置，根据jar的存放位置修改路径即可</li>
</ul>
<hr>
<h3 id="参考文章"><a href="#参考文章" class="headerlink" title="参考文章"></a>参考文章</h3><p><a href="https://www.cnblogs.com/HighnessDragonfly/p/13924869.html">1. idea如何生成jar包 - 博客园</a><br><a href="https://blog.csdn.net/Yimu_Wang/article/details/113666518">2. 使用java命令出现“Error: A JNI error…的一种解决方案</a><br><a href="https://www.php.cn/java/guide/474272.html">3. 如何解决javac不是内部或外部命令，也不是可运行程序的问题</a><br><a href="https://www.cnblogs.com/dbei/articles/13355962.html">4. 打jar包之后读不到properties文件</a></p>
<hr>
]]></content>
      <categories>
        <category>技术</category>
      </categories>
      <tags>
        <tag>Java</tag>
        <tag>IntelliJ IDEA</tag>
        <tag>Jar</tag>
      </tags>
  </entry>
  <entry>
    <title>面试相关总结</title>
    <url>/2023/03/07/Interview-related-content/</url>
    <content><![CDATA[<p><a href="https://blog.csdn.net/adminpd/article/details/122934938">Redis面试题总结（2022最新版）</a></p>
<p><a href="https://www.cnblogs.com/chumochen/p/17134303.html">NET面试总结</a></p>
<hr>
]]></content>
      <categories>
        <category>技术</category>
      </categories>
      <tags>
        <tag>面试</tag>
      </tags>
  </entry>
  <entry>
    <title>Java-2048小游戏</title>
    <url>/2021/06/26/Java-2048-game/</url>
    <content><![CDATA[<h1 id="游戏规则"><a href="#游戏规则" class="headerlink" title="游戏规则"></a>游戏规则</h1><ol>
<li>通过上、下、左、右移动，使相邻的相同数值的数字块进行合并。</li>
<li>每次生成得到的数字块是 2 或 4 ，生成的位置是在空白位置随机出现。</li>
<li>游戏最开始随机出现两个数字块</li>
<li>每次按下一个移动方向（上下左右），所有数字块都向该方向移动直到边界，相同两个数字块合并成两数之和变成一个数字块。</li>
<li>若移动后没有一个数字块发生位移，则移动无效，也不会产生新的数字块。</li>
<li>当游戏界面没有空位而且无法移动时，游戏失败。</li>
<li>游戏分数为界面内最大的数字，当数字为2048时游戏结束。</li>
</ol>
<h1 id="程序代码"><a href="#程序代码" class="headerlink" title="程序代码"></a>程序代码</h1><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> java.awt.*;</span><br><span class="line"><span class="keyword">import</span> java.awt.event.*;</span><br><span class="line"><span class="keyword">import</span> java.util.Random;</span><br><span class="line"><span class="keyword">import</span> javax.swing.*;</span><br><span class="line"></span><br><span class="line"><span class="comment">/* JPanel是swing包下的一个模板 */</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">game2048</span> <span class="keyword">extends</span> <span class="title class_">JPanel</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="type">int</span> <span class="variable">targetNum</span> <span class="operator">=</span> <span class="number">2048</span>; <span class="comment">//目标数字：2048</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="type">int</span> currentNum; <span class="comment">//当前最高数字</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="type">int</span> <span class="variable">side</span> <span class="operator">=</span> <span class="number">4</span>; <span class="comment">//2048游戏界面方格阵的方块数为 4 * 4</span></span><br><span class="line">    <span class="keyword">private</span> <span class="type">boolean</span> <span class="variable">moveCheck</span> <span class="operator">=</span> <span class="literal">false</span>; <span class="comment">//声明的一个bool数，检查有效移动的状态，全局move开关</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> Tile[][] tile; <span class="comment">//声明一个待定二维数组</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">final</span> <span class="type">Random</span> <span class="variable">rand</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Random</span>();   <span class="comment">//定义随机类</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">//游戏的运行状态分为以下四种: 开始，胜利，正在运行，失败</span></span><br><span class="line">    <span class="keyword">enum</span> <span class="title class_">GameState</span> &#123; start, run, win, fail &#125;</span><br><span class="line">    <span class="keyword">private</span> <span class="type">GameState</span> <span class="variable">gameState</span> <span class="operator">=</span> GameState.start;  <span class="comment">//初始化游戏状态为start开始状态</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">//定义包含两个颜色的数字颜色板colorTilePanel用来存储 数字块的颜色</span></span><br><span class="line">    <span class="keyword">final</span> Color[] colorTilePanel = &#123;    <span class="comment">//final关键字 表示 不可变，只能赋值一次</span></span><br><span class="line">        <span class="keyword">new</span> <span class="title class_">Color</span>(<span class="number">0xFF6D6D</span>), <span class="keyword">new</span> <span class="title class_">Color</span>(<span class="number">0xFF8C00</span>), <span class="keyword">new</span> <span class="title class_">Color</span>(<span class="number">0xFFDB63</span>), <span class="keyword">new</span> <span class="title class_">Color</span>(<span class="number">0xBBEC6D</span>),</span><br><span class="line">        <span class="keyword">new</span> <span class="title class_">Color</span>(<span class="number">0x04BD0C</span>), <span class="keyword">new</span> <span class="title class_">Color</span>(<span class="number">0x0CF6D4</span>), <span class="keyword">new</span> <span class="title class_">Color</span>(<span class="number">0x1278FF</span>), <span class="keyword">new</span> <span class="title class_">Color</span>(<span class="number">0x6D18F6</span>),</span><br><span class="line">        <span class="keyword">new</span> <span class="title class_">Color</span>(<span class="number">0xF65EFF</span>), <span class="keyword">new</span> <span class="title class_">Color</span>(<span class="number">0xFF0000</span>)</span><br><span class="line">    &#125;;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//game2048类的构造方法(构造函数)</span></span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">game2048</span><span class="params">()</span></span><br><span class="line">    &#123;</span><br><span class="line">        setPreferredSize(<span class="keyword">new</span> <span class="title class_">Dimension</span>(<span class="number">500</span>, <span class="number">500</span>));  <span class="comment">//设定组件尺寸大小</span></span><br><span class="line">        setFont(<span class="keyword">new</span> <span class="title class_">Font</span>(<span class="string">&quot;宋体&quot;</span>, Font.BOLD, <span class="number">50</span>));  <span class="comment">//设置文字属性(宋体,加粗,字号50)</span></span><br><span class="line">        setFocusable(<span class="literal">true</span>); <span class="comment">//控制键盘是否可以获得按钮的焦点:是</span></span><br><span class="line"></span><br><span class="line">        <span class="comment">//addMouseListener 添加 用于接收&quot;鼠标事件&quot;的侦听器接口 OK</span></span><br><span class="line">        addMouseListener(<span class="keyword">new</span> <span class="title class_">MouseAdapter</span>() &#123;   <span class="comment">//MouseAdapter 适配器可以替代接口来处理事件</span></span><br><span class="line">            <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">mousePressed</span><span class="params">(MouseEvent event)</span> &#123;</span><br><span class="line">                <span class="type">int</span> <span class="variable">mouseCode</span> <span class="operator">=</span> event.getButton();</span><br><span class="line">                <span class="keyword">if</span>(mouseCode == MouseEvent.BUTTON1) &#123;</span><br><span class="line">                    startGame();    <span class="comment">//鼠标左键点击,开始游戏</span></span><br><span class="line">                    repaint();  <span class="comment">//刷新页面,利于页面重画</span></span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;);</span><br><span class="line"></span><br><span class="line">        <span class="comment">//addKeyListener 添加 用于接收&quot;键盘事件&quot;的侦听器接口</span></span><br><span class="line">        addKeyListener(<span class="keyword">new</span> <span class="title class_">KeyAdapter</span>() &#123;</span><br><span class="line">            <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">keyPressed</span><span class="params">(KeyEvent event)</span> &#123;</span><br><span class="line">                <span class="type">int</span> <span class="variable">keyCode</span> <span class="operator">=</span> event.getKeyCode();</span><br><span class="line">                <span class="keyword">if</span>(keyCode == KeyEvent.VK_UP) &#123;</span><br><span class="line">                    move(<span class="number">0</span>, -<span class="number">1</span>, <span class="number">0</span>);</span><br><span class="line">                &#125;</span><br><span class="line">                <span class="keyword">else</span> <span class="keyword">if</span>(keyCode == KeyEvent.VK_DOWN) &#123;</span><br><span class="line">                    move(<span class="number">15</span>, <span class="number">1</span>, <span class="number">0</span>); <span class="comment">//15=4*4-1,即二维4*4数组最后一个的下标</span></span><br><span class="line">                &#125;</span><br><span class="line">                <span class="keyword">else</span> <span class="keyword">if</span>(keyCode == KeyEvent.VK_LEFT) &#123;</span><br><span class="line">                    move(<span class="number">0</span>, <span class="number">0</span>, -<span class="number">1</span>);</span><br><span class="line">                &#125;</span><br><span class="line">                <span class="keyword">else</span> <span class="keyword">if</span>(keyCode == KeyEvent.VK_RIGHT) &#123;</span><br><span class="line">                    move(<span class="number">15</span>, <span class="number">0</span>, <span class="number">1</span>);</span><br><span class="line">                &#125;</span><br><span class="line">                repaint();</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="comment">/* startGame方法功能: 如果游戏不是在running(正在运行)状态 则将游戏调整至start(开始)状态</span></span><br><span class="line"><span class="comment">    *  start状态: 游戏得分归0; 清空游戏界面；在界面中随机出现两个数字块</span></span><br><span class="line"><span class="comment">      */</span></span><br><span class="line">    <span class="keyword">void</span> <span class="title function_">startGame</span><span class="params">()</span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">if</span> (gameState != GameState.run) &#123;</span><br><span class="line">            currentNum = <span class="number">0</span>;</span><br><span class="line">            gameState = GameState.run;</span><br><span class="line">            tile = <span class="keyword">new</span> <span class="title class_">Tile</span>[side][side];</span><br><span class="line">            addTile(); addTile(); <span class="comment">//随机添加2个数字块</span></span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//随机添加数字块</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">void</span> <span class="title function_">addTile</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="type">int</span> <span class="variable">position</span> <span class="operator">=</span> rand.nextInt(side * side);    <span class="comment">//随机生成一个 0~15 之间的数，代表下一个出现数字块的位置</span></span><br><span class="line">        <span class="type">int</span> row, col;</span><br><span class="line">        <span class="keyword">do</span> &#123;</span><br><span class="line">            position = (position + <span class="number">1</span>) % (side * side);</span><br><span class="line">            <span class="comment">//当第一个随机数为15,将在(4,4)产生块,但是如果原先那有块,则pos再+1=17,超出了1-16的范围，所以需要求模运算</span></span><br><span class="line">            row = position / side;</span><br><span class="line">            col = position % side;</span><br><span class="line">        &#125; <span class="keyword">while</span> (tile[row][col] != <span class="literal">null</span>);  <span class="comment">//当(row,col)位置是空的</span></span><br><span class="line">        <span class="type">int</span> <span class="variable">value</span> <span class="operator">=</span> rand.nextInt(<span class="number">10</span>) == <span class="number">0</span> ? <span class="number">4</span> : <span class="number">2</span>;  <span class="comment">//生成的数字块有10%的概率为4；90%的概率为2</span></span><br><span class="line">        tile[row][col] = <span class="keyword">new</span> <span class="title class_">Tile</span>(value);    <span class="comment">//在(row,col)空位置上放置值为val的数字块</span></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//绘制组件</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">paintComponent</span><span class="params">(Graphics g)</span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="built_in">super</span>.paintComponent(g);   <span class="comment">//调用super.paintComponent(gg),保留容器中的原本组件</span></span><br><span class="line">        <span class="type">Graphics2D</span> <span class="variable">gg</span> <span class="operator">=</span> (Graphics2D) g; <span class="comment">//将gg强转成Graphics2D类型,然后传给g</span></span><br><span class="line">        gg.setRenderingHint(RenderingHints.KEY_ANTIALIASING, RenderingHints.VALUE_ANTIALIAS_ON); <span class="comment">//抗锯齿</span></span><br><span class="line">        drawGrid(gg);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//绘制网格</span></span><br><span class="line">    <span class="keyword">void</span> <span class="title function_">drawGrid</span><span class="params">(Graphics2D g)</span> &#123;</span><br><span class="line">        g.setColor(<span class="keyword">new</span> <span class="title class_">Color</span>(<span class="number">0xC3F8F0</span>));  <span class="comment">//设定游戏网格为“浅蓝色”</span></span><br><span class="line">        g.fillRoundRect(<span class="number">0</span>, <span class="number">0</span>, <span class="number">500</span>, <span class="number">500</span>,<span class="number">15</span>, <span class="number">15</span>);    <span class="comment">//设置网格背景的圆角矩形</span></span><br><span class="line">        <span class="keyword">if</span> (gameState == GameState.run)    <span class="comment">//running状态下，要绘制16个小的圆角矩形</span></span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">r</span> <span class="operator">=</span> <span class="number">0</span>; r &lt; side; r++) &#123;</span><br><span class="line">                <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">c</span> <span class="operator">=</span> <span class="number">0</span>; c &lt; side; c++) &#123;</span><br><span class="line">                    <span class="keyword">if</span> (tile[r][c] == <span class="literal">null</span>) &#123;</span><br><span class="line">                        g.setColor(<span class="keyword">new</span> <span class="title class_">Color</span>(<span class="number">0xFFF9FF</span>)); <span class="comment">//如果(r,c)是空位,则将空位的背景颜色设置为“淡灰色”</span></span><br><span class="line">                        g.fillRoundRect(<span class="number">15</span> + c * <span class="number">121</span>, <span class="number">15</span> + r * <span class="number">121</span>,</span><br><span class="line">                                <span class="number">106</span>, <span class="number">106</span>, <span class="number">7</span>, <span class="number">7</span>);  <span class="comment">//填充空位的圆角矩形</span></span><br><span class="line">                    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                        drawTile(g, r, c);  <span class="comment">//如果(r,c)是空位,则在(r,c)处绘制数字块</span></span><br><span class="line">                    &#125;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">else</span>    <span class="comment">//若不在running状态下，绘制背景板为startColor的“肤色”</span></span><br><span class="line">        &#123;</span><br><span class="line">            g.setColor(<span class="keyword">new</span> <span class="title class_">Color</span>(<span class="number">0x2EE4F5</span>));</span><br><span class="line">            g.fillRoundRect(<span class="number">15</span>, <span class="number">15</span>, <span class="number">469</span>, <span class="number">469</span>, <span class="number">7</span>, <span class="number">7</span>);</span><br><span class="line"></span><br><span class="line">            <span class="comment">//设置后续字体颜色；.darker()使“2048等提示信息”的颜色变暗,反复使用效果增强</span></span><br><span class="line">            g.setColor((<span class="keyword">new</span> <span class="title class_">Color</span>(<span class="number">0x044DBB</span>)).darker());</span><br><span class="line">            g.setFont(<span class="keyword">new</span> <span class="title class_">Font</span>(<span class="string">&quot;宋体&quot;</span>, Font.BOLD, <span class="number">70</span>));</span><br><span class="line">            g.drawString(<span class="string">&quot;2048小游戏&quot;</span>, <span class="number">70</span>, <span class="number">170</span>);</span><br><span class="line"></span><br><span class="line">            g.setFont(<span class="keyword">new</span> <span class="title class_">Font</span>(<span class="string">&quot;宋体&quot;</span>, Font.BOLD, <span class="number">30</span>));    <span class="comment">//设置结束提示信息的字体属性</span></span><br><span class="line">            <span class="keyword">if</span> (gameState == GameState.win)</span><br><span class="line">                g.drawString(<span class="string">&quot;玩家胜利!&quot;</span>, <span class="number">185</span>, <span class="number">250</span>);</span><br><span class="line">            <span class="keyword">else</span> <span class="keyword">if</span> (gameState == GameState.fail)</span><br><span class="line">                g.drawString(<span class="string">&quot;游戏失败!&quot;</span>, <span class="number">185</span>, <span class="number">250</span>);</span><br><span class="line"></span><br><span class="line">            g.setColor(<span class="keyword">new</span> <span class="title class_">Color</span>(<span class="number">0xA1F6D2</span>));  <span class="comment">//设置下面提示信息的颜色</span></span><br><span class="line">            g.setFont(<span class="keyword">new</span> <span class="title class_">Font</span>(<span class="string">&quot;宋体&quot;</span>, Font.BOLD, <span class="number">20</span>));</span><br><span class="line">            g.drawString(<span class="string">&quot;&gt; 鼠标左键点击开始新游戏 &lt;&quot;</span>, <span class="number">115</span>, <span class="number">370</span>);</span><br><span class="line">            <span class="keyword">if</span>(gameState == GameState.start)</span><br><span class="line">                g.drawString(<span class="string">&quot;使用上下左右方向键控制数字块移动&quot;</span>, <span class="number">90</span>, <span class="number">430</span>);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//绘制数字块</span></span><br><span class="line">    <span class="keyword">void</span> <span class="title function_">drawTile</span><span class="params">(Graphics2D g, <span class="type">int</span> r, <span class="type">int</span> c)</span> &#123;</span><br><span class="line">        <span class="type">int</span> <span class="variable">value</span> <span class="operator">=</span> tile[r][c].getValue();</span><br><span class="line">        g.setColor(colorTilePanel[(<span class="type">int</span>) (Math.log(value) / Math.log(<span class="number">2</span>)) - <span class="number">1</span>]);</span><br><span class="line">        <span class="comment">/* setColor( colorTable[ ln(value/2)-1 ] )</span></span><br><span class="line"><span class="comment">        *  当value=2^1=2,取colorTilePanel[0],则数字块2的颜色为颜色板位置0处的</span></span><br><span class="line"><span class="comment">           当value=2^10=1024,取colorPanel[9],则数字块1024的颜色为颜色板最后位置9处的</span></span><br><span class="line"><span class="comment">           */</span></span><br><span class="line">        g.fillRoundRect(<span class="number">15</span> + c * <span class="number">121</span>, <span class="number">15</span> + r * <span class="number">121</span>, <span class="number">106</span>, <span class="number">106</span>, <span class="number">7</span>, <span class="number">7</span>);</span><br><span class="line">        <span class="type">String</span> <span class="variable">str</span> <span class="operator">=</span> String.valueOf(value);   <span class="comment">//将int型变量 value 转换成字符串,存放在str中</span></span><br><span class="line">        g.setColor(<span class="keyword">new</span> <span class="title class_">Color</span>(<span class="number">0xFFF4D3</span>));</span><br><span class="line">        <span class="type">FontMetrics</span> <span class="variable">fm</span> <span class="operator">=</span> g.getFontMetrics();</span><br><span class="line">        <span class="type">int</span> <span class="variable">ascent</span> <span class="operator">=</span> fm.getAscent();   <span class="comment">//ascent是 基准线 之上至字符最高处的距离</span></span><br><span class="line">        <span class="type">int</span> <span class="variable">descent</span> <span class="operator">=</span> fm.getDescent();  <span class="comment">//descent是 基准线 之下至字符最低处的距离</span></span><br><span class="line">        <span class="type">int</span> <span class="variable">x</span> <span class="operator">=</span> <span class="number">15</span> + c * <span class="number">121</span> + (<span class="number">106</span> - fm.stringWidth(str)) / <span class="number">2</span>;</span><br><span class="line">        <span class="type">int</span> <span class="variable">y</span> <span class="operator">=</span> <span class="number">15</span> + r * <span class="number">121</span> + (ascent + (<span class="number">106</span> - (ascent + descent)) / <span class="number">2</span>);</span><br><span class="line">        g.drawString(str, x, y);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="comment">/*  move()方法</span></span><br><span class="line"><span class="comment">    *  传入参数：countDownFrom -&gt; 从这开始找需要移动的方块; yIncrease -&gt; y方向增量; xIncrease -&gt; x方向增量;</span></span><br><span class="line"><span class="comment">    *</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">private</span> <span class="type">boolean</span> <span class="title function_">move</span><span class="params">(<span class="type">int</span> countDownFrom, <span class="type">int</span> yIncrease, <span class="type">int</span> xIncrease)</span> &#123;</span><br><span class="line">        <span class="type">boolean</span> <span class="variable">flag_Move</span> <span class="operator">=</span> <span class="literal">false</span>; <span class="comment">//用来标记 是否已经移动</span></span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt; side * side; i++) &#123;</span><br><span class="line">            <span class="type">int</span> <span class="variable">j</span> <span class="operator">=</span> Math.abs(countDownFrom - i); <span class="comment">//abs():取绝对值</span></span><br><span class="line">            <span class="type">int</span> <span class="variable">row</span> <span class="operator">=</span> j / side;</span><br><span class="line">            <span class="type">int</span> <span class="variable">col</span> <span class="operator">=</span> j % side;</span><br><span class="line">            <span class="keyword">if</span> (tile[row][col] == <span class="literal">null</span>) <span class="keyword">continue</span>;</span><br><span class="line">            <span class="type">int</span> <span class="variable">nextRow</span> <span class="operator">=</span> row + yIncrease;</span><br><span class="line">            <span class="type">int</span> <span class="variable">nextCol</span> <span class="operator">=</span> col + xIncrease;</span><br><span class="line"></span><br><span class="line">            <span class="keyword">while</span> (nextRow &gt;= <span class="number">0</span> &amp;&amp; nextRow &lt; side &amp;&amp; nextCol &gt;= <span class="number">0</span> &amp;&amp; nextCol &lt; side) &#123; <span class="comment">//当数字块不在边界</span></span><br><span class="line">                <span class="type">Tile</span> <span class="variable">next</span> <span class="operator">=</span> tile[nextRow][nextCol];    <span class="comment">//移动后的数字块</span></span><br><span class="line">                <span class="type">Tile</span> <span class="variable">current</span> <span class="operator">=</span> tile[row][col];       <span class="comment">//数字块的目前位置</span></span><br><span class="line">                <span class="keyword">if</span> (next == <span class="literal">null</span>) &#123; <span class="comment">//如果移动后的位置没有数字块</span></span><br><span class="line"></span><br><span class="line">                    <span class="keyword">if</span> (moveCheck) <span class="keyword">return</span> <span class="literal">true</span>; <span class="comment">//检查可用的移动,如果可以移动则返回</span></span><br><span class="line"></span><br><span class="line">                    tile[nextRow][nextCol] = current;</span><br><span class="line">                    tile[row][col] = <span class="literal">null</span>;</span><br><span class="line">                    row = nextRow;</span><br><span class="line">                    col = nextCol;</span><br><span class="line">                    nextRow += yIncrease;</span><br><span class="line">                    nextCol += xIncrease;</span><br><span class="line">                    flag_Move = <span class="literal">true</span>;</span><br><span class="line"></span><br><span class="line">                &#125;<span class="keyword">else</span> <span class="keyword">if</span> (next.mergeCheck(current)) &#123; <span class="comment">//如果移动后的位置有能可以与之合并的数字块</span></span><br><span class="line"></span><br><span class="line">                    <span class="keyword">if</span> (moveCheck) <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line"></span><br><span class="line">                    <span class="type">int</span> <span class="variable">value</span> <span class="operator">=</span> next.merge(current); <span class="comment">//value是合并之后的数字</span></span><br><span class="line">                    <span class="keyword">if</span> (value &gt; currentNum) currentNum = value;</span><br><span class="line">                    tile[row][col] = <span class="literal">null</span>; <span class="comment">//数字块移动离开后，设定原位置为空块</span></span><br><span class="line">                    flag_Move = <span class="literal">true</span>;</span><br><span class="line">                    <span class="keyword">break</span>;</span><br><span class="line">                &#125;<span class="keyword">else</span></span><br><span class="line">                    <span class="keyword">break</span>;</span><br><span class="line">            &#125;   <span class="comment">// end while</span></span><br><span class="line"></span><br><span class="line">        &#125;   <span class="comment">// end for</span></span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> (flag_Move) &#123;</span><br><span class="line">            <span class="keyword">if</span> (currentNum &lt; targetNum) &#123; <span class="comment">//移动之后，如果没达到预定分数，清除合并状态，添加随机数字块</span></span><br><span class="line">                clearMerged();</span><br><span class="line">                addTile();</span><br><span class="line">                <span class="comment">//检查“满没满”</span></span><br><span class="line">                moveCheck = <span class="literal">true</span>; <span class="comment">//moveCheck是检查移动功能的开关，true为开</span></span><br><span class="line">                <span class="type">boolean</span> <span class="variable">canMoves</span> <span class="operator">=</span> move(<span class="number">0</span>, -<span class="number">1</span>, <span class="number">0</span>) || move(<span class="number">15</span>, <span class="number">1</span>, <span class="number">0</span>) ||</span><br><span class="line">                        move(<span class="number">0</span>, <span class="number">0</span>, -<span class="number">1</span>) || move(<span class="number">15</span>, <span class="number">0</span>, <span class="number">1</span>);</span><br><span class="line">                <span class="keyword">if</span> (!canMoves) &#123;</span><br><span class="line">                    gameState = GameState.fail;</span><br><span class="line">                &#125;</span><br><span class="line">                moveCheck = <span class="literal">false</span>; <span class="comment">//“关闭moveCheck开关”</span></span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">else</span> <span class="keyword">if</span> (currentNum == targetNum)</span><br><span class="line">                gameState = GameState.win;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> flag_Move;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//清除数字块的合并状态</span></span><br><span class="line">    <span class="keyword">void</span> <span class="title function_">clearMerged</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt; side; i++)</span><br><span class="line">            <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">j</span> <span class="operator">=</span> <span class="number">0</span>; j &lt; side; j++)</span><br><span class="line">                <span class="keyword">if</span> (tile[i][j] != <span class="literal">null</span>)</span><br><span class="line">                    tile[i][j].setMerge();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        <span class="type">JFrame</span> <span class="variable">frame</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">JFrame</span>();    <span class="comment">//新建一个窗口对象f</span></span><br><span class="line">        frame.setDefaultCloseOperation(JFrame.EXIT_ON_CLOSE);   <span class="comment">//在关闭窗体的同时，终止程序的运行</span></span><br><span class="line">        frame.setTitle(<span class="string">&quot;2048小游戏&quot;</span>);    <span class="comment">//设置窗口标题为“2048小游戏”</span></span><br><span class="line">        frame.setResizable(<span class="literal">false</span>);    <span class="comment">//窗口尺寸是否可变：否</span></span><br><span class="line">        frame.add(<span class="keyword">new</span> <span class="title class_">game2048</span>());    <span class="comment">//在窗口上添加“2048游戏”组件</span></span><br><span class="line">        frame.pack();    <span class="comment">//设定窗口的大小恰好能容纳其上添加的组件</span></span><br><span class="line">        frame.setLocationRelativeTo(<span class="literal">null</span>);    <span class="comment">//设置窗口相对于指定组件的位置,若参数为null，则窗口将置于屏幕中央</span></span><br><span class="line">        frame.setVisible(<span class="literal">true</span>);    <span class="comment">//窗口是否可见：是</span></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// tile类: 数字块</span></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Tile</span> &#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="type">int</span> value;  <span class="comment">//数据成员value: 数字块上的数值</span></span><br><span class="line">    <span class="keyword">private</span> <span class="type">boolean</span> merge; <span class="comment">//数据成员merge: 是否能合并</span></span><br><span class="line"></span><br><span class="line">    Tile(<span class="type">int</span> value) &#123;</span><br><span class="line">        <span class="built_in">this</span>.value = value;</span><br><span class="line">    &#125;   <span class="comment">//Tile类的构造方法</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">void</span> <span class="title function_">setMerge</span><span class="params">()</span> &#123;</span><br><span class="line">        merge = <span class="literal">false</span>;</span><br><span class="line">    &#125;   <span class="comment">//设置方块的合并状态</span></span><br><span class="line"></span><br><span class="line">    <span class="type">int</span> <span class="title function_">getValue</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> value;</span><br><span class="line">    &#125;   <span class="comment">//value的getter方法</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">/* mergeCheck方法功能: 判断本方块与另一个方块是否能合并，返回bool值</span></span><br><span class="line"><span class="comment">     *  1. !merged 和 ！other.merged ---&gt; 两个方块的合并状态都是false</span></span><br><span class="line"><span class="comment">     *  2. value == other.getValue() ---&gt; 两个方块的数值相等</span></span><br><span class="line"><span class="comment">     *  若满足以上条件，则两方块可以合并，返回true  */</span></span><br><span class="line">    <span class="type">boolean</span> <span class="title function_">mergeCheck</span><span class="params">(Tile t)</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> !merge &amp;&amp; !t.merge &amp;&amp; value == t.getValue();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//方法功能: 判断两方块能合并之后，与另一个方块合并(即本方块数值×2)</span></span><br><span class="line">    <span class="type">int</span> <span class="title function_">merge</span><span class="params">(Tile t)</span> &#123;</span><br><span class="line">        <span class="keyword">if</span> (mergeCheck(t)) &#123;</span><br><span class="line">            value *= <span class="number">2</span>;</span><br><span class="line">            merge = <span class="literal">true</span>;</span><br><span class="line">            <span class="keyword">return</span> value;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> -<span class="number">1</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h1 id="运行结果"><a href="#运行结果" class="headerlink" title="运行结果"></a>运行结果</h1><p> 初始界面：<br><img src="https://img-blog.csdnimg.cn/20210626220219297.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzUwOTE4ODM0,size_16,color_FFFFFF,t_70#pic_center" style="zoom: 67%;" /><br>开始界面：<br><img src="https://img-blog.csdnimg.cn/202106262202567.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzUwOTE4ODM0,size_16,color_FFFFFF,t_70#pic_center =400x400" style="zoom:67%;" /><br>失败界面：<br><img src="https://img-blog.csdnimg.cn/20210626220334688.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzUwOTE4ODM0,size_16,color_FFFFFF,t_70#pic_center =400x400" style="zoom:67%;" /><br>胜利界面：<br><img src="https://img-blog.csdnimg.cn/20210626220403350.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzUwOTE4ODM0,size_16,color_FFFFFF,t_70#pic_center =400x400" style="zoom:67%;" /></p>
<hr>
]]></content>
      <categories>
        <category>技术</category>
      </categories>
      <tags>
        <tag>Java</tag>
      </tags>
  </entry>
  <entry>
    <title>Pycharm常见报错及解决方案</title>
    <url>/2023/03/15/Pycharm-common-errors-and-solutions/</url>
    <content><![CDATA[<h5 id="No-Python-at-‘D-Python-python-exe’-and-solution"><a href="#No-Python-at-‘D-Python-python-exe’-and-solution" class="headerlink" title="No Python at ‘D:\Python\python.exe’ and solution"></a><a href="https://blog.csdn.net/qq_47733361/article/details/123658062">No Python at ‘D:\Python\python.exe’ and solution</a></h5><p><strong>Solution</strong>：查看<code>File - Settings - Project: xxx - Python Interpreter</code>，点击右侧齿轮图标，选择<code>Add</code>，勾选<code>Existing environment</code>，在<code>Interpreter</code>处选择本地Python路径即可</p>
<hr>
]]></content>
      <categories>
        <category>技术</category>
      </categories>
      <tags>
        <tag>Python</tag>
        <tag>Pycharm</tag>
      </tags>
  </entry>
  <entry>
    <title>常用数据库的异同</title>
    <url>/2023/03/14/SQL/</url>
    <content><![CDATA[<p><a href="https://blog.csdn.net/qq_32392597/article/details/107645823">ISAM、MyISAM、InnoDB、ACID详解</a></p>
<p><a href="https://zhuanlan.zhihu.com/p/362598819">MySQL 与 PostgreSQL 比较</a></p>
<hr>
]]></content>
      <categories>
        <category>技术</category>
      </categories>
      <tags>
        <tag>MySQL</tag>
        <tag>PostgreSQ</tag>
      </tags>
  </entry>
  <entry>
    <title>Ubuntu问题及解决方案汇总</title>
    <url>/2023/03/07/Ubuntu-problems-and-solutions/</url>
    <content><![CDATA[<hr>
<p><a href="https://www.cnblogs.com/nuochengze/p/12642282.html">解决Ubuntu连不上网络，输入ifconfig只显示本地环回问题</a></p>
<hr>
]]></content>
      <categories>
        <category>技术</category>
      </categories>
      <tags>
        <tag>Ubuntu</tag>
      </tags>
  </entry>
  <entry>
    <title>面向 C++ 开发的 Visual Studio 2019 安装教程</title>
    <url>/2021/09/30/Visual-Studio-2019-installation-tutorial-for-C++-development/</url>
    <content><![CDATA[<h2 id="Visual-Studio-2019-的下载与安装"><a href="#Visual-Studio-2019-的下载与安装" class="headerlink" title="Visual Studio 2019 的下载与安装"></a>Visual Studio 2019 的下载与安装</h2><p>注：<strong>过程中需要登陆 Microsoft 账户，正常登陆即可</strong></p>
<ol>
<li>到<a href="https://visualstudio.microsoft.com/zh-hans/vs/"> Visual Studio官网 </a>下载<strong>Visual Studio 2019 community</strong> ，点击后会自动下载<img src="https://img-blog.csdnimg.cn/8fd6889f973f4ec7b4b7a2dc9ecbd66a.png?x-oss-process=image/watermark,type_ZHJvaWRzYW5zZmFsbGJhY2s,shadow_50,text_Q1NETiBAU2FmZm9ybg==,size_20,color_FFFFFF,t_70,g_se,x_16" style="zoom: 67%;" /></li>
<li>打开下载器，进入Visual Studio 2019 安装界面<img src="https://img-blog.csdnimg.cn/759ee143f64843b8a42f296ffc6fd45a.png?x-oss-process=image/watermark,type_ZHJvaWRzYW5zZmFsbGJhY2s,shadow_50,text_Q1NETiBAU2FmZm9ybg==,size_20,color_FFFFFF,t_70,g_se,x_16" style="zoom: 67%;" /></li>
<li>设置安装选项。使用C++语言的开发者勾选<code>使用 C++ 的桌面开发</code>，使用Python语言的开发者勾选 <code> Python 开发</code><img src="https://img-blog.csdnimg.cn/e29fece6300f4d57a32c169ab147c006.png?x-oss-process=image/watermark,type_ZHJvaWRzYW5zZmFsbGJhY2s,shadow_50,text_Q1NETiBAU2FmZm9ybg==,size_20,color_FFFFFF,t_70,g_se,x_16" style="zoom: 67%;" /></li>
<li>在右侧的 <strong><code>使用C++的桌面开发</code></strong> 的子目录 <code>可选</code> 和 <strong><code>单个组件</code></strong> 中勾选下图所示组件：<img src="https://img-blog.csdnimg.cn/574083ab13e247888a73f092059f8f99.png?x-oss-process=image/watermark,type_ZHJvaWRzYW5zZmFsbGJhY2s,shadow_50,text_Q1NETiBAU2FmZm9ybg==,size_15,color_FFFFFF,t_70,g_se,x_16" style="zoom: 80%;" /></li>
<li><strong>语言包</strong>选择 <code>中文(简体)</code> 或 <code>英文</code><img src="https://img-blog.csdnimg.cn/509c2fe2ffe24001937868ec1bb9d663.png?x-oss-process=image/watermark,type_ZHJvaWRzYW5zZmFsbGJhY2s,shadow_50,text_Q1NETiBAU2FmZm9ybg==,size_20,color_FFFFFF,t_70,g_se,x_16" style="zoom: 67%;" /></li>
<li><strong>安装位置</strong>最好选择在 <strong>C盘以外 的其他地方</strong>，建议是在D盘或其他盘新建一个名为<code>Visual Studio 2019</code>的文件夹，在该文件夹中新建一个名为<code>community</code>的文件夹，将该文件夹设定为VS2019的安装目录；下载缓存和共享组件、工具、SDK等也建议都修改其默认目录<img src="https://img-blog.csdnimg.cn/4f06ba9b525241f4baba4dc64243fb38.png?x-oss-process=image/watermark,type_ZHJvaWRzYW5zZmFsbGJhY2s,shadow_50,text_Q1NETiBAU2FmZm9ybg==,size_20,color_FFFFFF,t_70,g_se,x_16" style="zoom: 67%;" /></li>
<li>点击 <b><code>安装</code></b>，期间不要断网，全部下载安装完毕后，即可使用VS2019进行C++开发</li>
<li>如果你按照以上教程安装成功后，在<code>我的电脑 -&gt; D:\Visual Studio 2019\Community\Common7\IDE</code>目录下，找到名为 <code>devenv.exe</code> 应用程序，右键添加到桌面快捷方式 <em>（再给快捷方式改个名字就更好了）</em><img src="https://img-blog.csdnimg.cn/cf43915e615a488789d02b752862d7ff.png" style="zoom: 80%;" /></li>
</ol>
<h2 id="Visual-Studio-2019-的使用"><a href="#Visual-Studio-2019-的使用" class="headerlink" title="Visual Studio 2019 的使用"></a>Visual Studio 2019 的使用</h2><ol>
<li>打开 Visual Studio 2019 的界面，选择 <strong><code>创建新项目</code></strong> 或者 **<code>继续但无需代码</code>**（选择后者VS2019将作为文件编辑器使用）<img src="https://img-blog.csdnimg.cn/ac9e74a0e5424be7b6353713c768c97e.png?x-oss-process=image/watermark,type_ZHJvaWRzYW5zZmFsbGJhY2s,shadow_50,text_Q1NETiBAU2FmZm9ybg==,size_20,color_FFFFFF,t_70,g_se,x_16" style="zoom: 67%;" /></li>
<li>选择 <strong><code>创建空项目</code></strong> 后，选择<code>控制台应用</code> 或者 <code>空项目</code>，前者会创建默认有打印Hello World的代码，接着点击 <strong><code>下一步</code></strong><img src="https://img-blog.csdnimg.cn/92cadf51e01a4d90b98bac863d311e7b.png?x-oss-process=image/watermark,type_ZHJvaWRzYW5zZmFsbGJhY2s,shadow_50,text_Q1NETiBAU2FmZm9ybg==,size_20,color_FFFFFF,t_70,g_se,x_16" style="zoom:67%;" /></li>
<li>填写创建的<strong>项目名称</strong>，可以修改<strong>项目的存储位置</strong>（后面会介绍修改默认存储地址的方法），接着点击 **<code>创建</code>**即可<img src="https://img-blog.csdnimg.cn/d9ef172e1f0e49f49f32c99b904e33e8.png?x-oss-process=image/watermark,type_ZHJvaWRzYW5zZmFsbGJhY2s,shadow_50,text_Q1NETiBAU2FmZm9ybg==,size_20,color_FFFFFF,t_70,g_se,x_16" style="zoom:67%;" />
<img src="https://img-blog.csdnimg.cn/64b4434941a64723925bac5ccd3218ab.png?x-oss-process=image/watermark,type_ZHJvaWRzYW5zZmFsbGJhY2s,shadow_50,text_Q1NETiBAU2FmZm9ybg==,size_20,color_FFFFFF,t_70,g_se,x_16" style="zoom:67%;" /></li>
</ol>
<hr>
<ol start="4">
<li>如果选择 **<code>继续但无需代码</code>**，进入编辑器界面，选择最上方工具栏的 <strong><code>文件 -&gt; 新建 -&gt; 文件</code></strong><img src="https://img-blog.csdnimg.cn/425f4fd566e447d8ab2cf056c2108406.png?x-oss-process=image/watermark,type_ZHJvaWRzYW5zZmFsbGJhY2s,shadow_50,text_Q1NETiBAU2FmZm9ybg==,size_20,color_FFFFFF,t_70,g_se,x_16" style="zoom:67%;" /></li>
<li>在侧栏中选择 <code>Visual C++</code>，中间栏选择 <code>C++ 文件(.cpp)</code> ，点击<code>打开</code>即可创建新的空文件<img src="https://img-blog.csdnimg.cn/3991e0c16e864090b6dc9b9a63149768.png?x-oss-process=image/watermark,type_ZHJvaWRzYW5zZmFsbGJhY2s,shadow_50,text_Q1NETiBAU2FmZm9ybg==,size_20,color_FFFFFF,t_70,g_se,x_16" style="zoom:67%;" /></li>
<li>在中央的<strong>代码编辑区</strong>填写完代码后，点击左上角的<code>保存</code>按键或按下<code>Ctrl + S</code>保存文件；建议将代码文件放在 <strong>Visual Studio 2019 安装目录中的自定义文件夹</strong>里，或者放在 <strong>非C盘的集中的代码存放位置</strong>，便于以后查找<img src="https://img-blog.csdnimg.cn/2a699d16b84c45f3a23cfbe93dbcf020.png?x-oss-process=image/watermark,type_ZHJvaWRzYW5zZmFsbGJhY2s,shadow_50,text_Q1NETiBAU2FmZm9ybg==,size_20,color_FFFFFF,t_70,g_se,x_16" style="zoom:67%;" /></li>
</ol>
<hr>
]]></content>
      <categories>
        <category>技术</category>
      </categories>
      <tags>
        <tag>C++</tag>
        <tag>Visual Studio</tag>
      </tags>
  </entry>
  <entry>
    <title>Win10安装汇编环境masm x64</title>
    <url>/2022/03/14/Win10-64bit-Installation-Assembly-Environment-masm/</url>
    <content><![CDATA[<p>本文转载自 <a href="https://www.cnblogs.com/dgwblog/p/11865850.html">Win10(64位)安装汇编环境(MASM) - 博客园</a>，亲自尝试之后决定转载，并在原文基础上补充了一些 <strong>操作细节</strong>，也<strong>删去了少许内容</strong>，鼓励读者看一遍<a href="https://www.cnblogs.com/dgwblog/p/11865850.html">原文</a>。</p>
<hr>
<ol start="0">
<li>需要的文件：<a href="https://files-cdn.cnblogs.com/files/dgwblog/DOSBox.rar">DOSBox.rar</a></li>
</ol>
<hr>
<ol>
<li><p>将压缩包解压到某一目录下，运行 DOSBox.exe</p>
<img src="https://img-blog.csdnimg.cn/55ae9806ba264c2e83a5df57783b95e8.png?x-oss-process=image/watermark,type_d3F5LXplbmhlaQ,shadow_50,text_Q1NETiBAU2FmZm9ybg==,size_20,color_FFFFFF,t_70,g_se,x_16" style="zoom: 67%;" /></li>
<li><p>在弹出的小窗口中 输入命令 <code>mount c: d://DOSBox/masm</code>，将指定目录下的 masm 部署到 c: 目录下 <em>（如果你想安装在D盘目录下，<code>d://DOSBox/masm </code>是 DOSBox 下 masm文件夹的目录地址）</em></p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">mount c: d://DOSBox/masm</span><br></pre></td></tr></table></figure>
<img src="https://img-blog.csdnimg.cn/3ff2f91d01e440b3863e59915afd432b.png?x-oss-process=image/watermark,type_d3F5LXplbmhlaQ,shadow_50,text_Q1NETiBAU2FmZm9ybg==,size_20,color_FFFFFF,t_70,g_se,x_16" style="zoom:80%;" />
</li>
<li><p>查看是否部署成功</p>
</li>
</ol>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">c:</span><br><span class="line"><span class="built_in">dir</span></span><br></pre></td></tr></table></figure>
<p>运行结果如下：<br><img src="https://img-blog.csdnimg.cn/c19cbc5dd00d47079f0bec30676d1f56.png" style="zoom: 80%;" /></p>
<ol start="4">
<li>在 masm 目录下创建 test.asm 文件，编写 helloworld 程序（可以先在 txt 文件中编写，再改文件名和后缀名），保存文件，关闭</li>
</ol>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">.model small</span><br><span class="line"></span><br><span class="line">.data</span><br><span class="line">    strs DB <span class="string">&#x27;hello world&#x27;</span>,<span class="number">13</span>,<span class="number">10</span>,<span class="string">&#x27;$&#x27;</span></span><br><span class="line">.code</span><br><span class="line">start:</span><br><span class="line">    mov ax,@data</span><br><span class="line">    mov ds,ax</span><br><span class="line">    mov dx,offset strs</span><br><span class="line">    mov ah,09h</span><br><span class="line">    <span class="built_in">int</span> 21h</span><br><span class="line">    mov ah,4ch</span><br><span class="line">    <span class="built_in">int</span> 21h</span><br><span class="line">end start</span><br></pre></td></tr></table></figure>
<img src="https://img-blog.csdnimg.cn/c79972c356ab4c4e8bf19d87e6b8f0fc.png?x-oss-process=image/watermark,type_d3F5LXplbmhlaQ,shadow_50,text_Q1NETiBAU2FmZm9ybg==,size_19,color_FFFFFF,t_70,g_se,x_16" style="zoom:80%;" />

<ol start="5">
<li>（假设你之前解压在D盘目录下）再利用 <code>mount c: d://DOSBox/masm</code> 命令 将 test.asm 文件复制到 c: 目录下，利用 <code>dir</code> 命令 检查是否成功 <em>（即 c: 目录下出现 <code>test.asm</code> 文件）</em><img src="https://img-blog.csdnimg.cn/845b2e08b170456e8eefc04a5828055e.png?x-oss-process=image/watermark,type_d3F5LXplbmhlaQ,shadow_50,text_Q1NETiBAU2FmZm9ybg==,size_14,color_FFFFFF,t_70,g_se,x_16" style="zoom:80%;" />
PS：如果未成功可以把 DOSBox程序关闭，再重新打开（doge</li>
<li>输入汇编命令 <code>masm test.asm</code>，遇到选项默认回车即可<img src="https://img-blog.csdnimg.cn/7e52953540d84130b80472f63bcadbdd.png?x-oss-process=image/watermark,type_d3F5LXplbmhlaQ,shadow_50,text_Q1NETiBAU2FmZm9ybg==,size_20,color_FFFFFF,t_70,g_se,x_16" style="zoom:80%;" />
可以发现目录下出现了 `test.obj` 文件
<img src="https://img-blog.csdnimg.cn/adf9efd443454715812869b1bdacb4ed.png" style="zoom:80%;" /></li>
<li>运行链接命令 <code>link test.obj</code>，遇到选项默认回车，目录下产生 <code>test.exe</code> 文件；<strong>Link : warning xxxxx: no stack segment 是在提示编程人员程序中没有堆栈段，并非程序或配置出现错误</strong><img src="https://img-blog.csdnimg.cn/226f478f4e2d4f898edd60e8a084dd12.png?x-oss-process=image/watermark,type_d3F5LXplbmhlaQ,shadow_50,text_Q1NETiBAU2FmZm9ybg==,size_20,color_FFFFFF,t_70,g_se,x_16" style="zoom:80%;" /></li>
<li>输入运行命令 <code>test.exe</code> 运行exe文件，显示 hello world 即成功<br><img src="https://img-blog.csdnimg.cn/fc4274d37d59444aa99155277d84241c.png"></li>
</ol>
<hr>
]]></content>
      <categories>
        <category>技术</category>
      </categories>
      <tags>
        <tag>Assembly</tag>
        <tag>DOSBox</tag>
        <tag>MASM</tag>
      </tags>
  </entry>
  <entry>
    <title>Win10利用VMware安装StarVCenter(单机版)</title>
    <url>/2022/09/14/Win10-uses-VMware-to-install-StarVCenter-stand-alone/</url>
    <content><![CDATA[<h2 id="0-文件准备"><a href="#0-文件准备" class="headerlink" title="0 文件准备"></a>0 文件准备</h2><p><a href="http://download.starvcs.com/download/StarVCenter/StarVCenter_Community_Download/V4.2.20/starve4-x86_64-StarVCenter-mini-4.2.20.iso">starve4-x86_64-StarVCenter-mini-4.2.20.iso</a><br><a href="https://www.vmware.com/go/getworkstation-win">VMware Workstation 16 Pro</a></p>
<h2 id="1-创建虚拟机"><a href="#1-创建虚拟机" class="headerlink" title="1 创建虚拟机"></a>1 创建虚拟机</h2><ol start="0">
<li><p>安装 VMware Workstation，序列号: ZF3R0-FHED2-M80TY-8QYGC-NPKYF；YF390-0HF8P-M81RQ-2DXQE-M2UT6；ZF71R-DMX85-08DQY-8YMNC-PPHV8.</p>
</li>
<li><p>创建新的虚拟机</p>
<div align="center"> 
 <img src="https://img-blog.csdnimg.cn/91556430407c432ca90c7be931897a15.png" width = "40%"/>
</div>
</li>
<li><p>典型（推荐）（T）</p>
</li>
</ol>
  <div align="center"> 
      <img src="https://img-blog.csdnimg.cn/2893b563b8d9409a88c73ddd969ab3b7.png" width = "40%"/>
  </div>

<ol start="4">
<li><p>安装程序光盘映像文件(iso)(M) -&gt;选择 iso文件</p>
  <div align="center"> 
   <img src="https://img-blog.csdnimg.cn/4e20e699630d4cea8ba8fc295e23d265.png" width = "40%"/>
  </div>

</li>
<li><p>客户机操作系统  -&gt; linux；<br> 版本 -&gt; CentOS 5 和更早版本64位</p>
 <div align="center"> 
 <img src="https://img-blog.csdnimg.cn/542ae2ef42724776bbbbca383936e0d0.png" width = "40%"/>
   </div>
 </li>
<li><p>虚拟机名称 -&gt; 自己设置；<br> 位置 -&gt; 最好不要放在C盘</p>
 <div align="center"> 
   <img src="https://img-blog.csdnimg.cn/8b7af3ec31734b56ad8dee447c4ca7ec.png" width = "40%"/>
 </div>
</li>
<li><p>最大磁盘大小 -&gt; 建议32~64G；将虚拟磁盘 存储&#x2F;拆分 应该都行</p>
  <div align="center"> 
   <img src="https://img-blog.csdnimg.cn/d6e5d3a864f5412c9af8dd9423b2a280.png" width = "40%"/>
  </div>
</li>
<li><p>自定义硬件</p>
  <div align="center"> 
   <img src="https://img-blog.csdnimg.cn/e9a3e1c3ac1745e4a9119003c48f040b.png" width = "50%"/>
  </div></li>
</ol>
<ul>
<li>内存 8G（8192 MB）  <div align="center"> 
  <img src="https://img-blog.csdnimg.cn/0cec64e96b4b4acfbf48268f4ce412ec.png" width = "50%"/>
  </div></li>
<li>处理器数量：2处理器 * 2核；开启 虚拟化  <div align="center"> 
  <img src="https://img-blog.csdnimg.cn/d1e3f8e882d244d38481cf3b18ed0418.png" width = "50%"/>
  </div></li>
<li>网络连接 → 桥接模式 → 复制网络连接状态  <div align="center"> 
  <img src="https://img-blog.csdnimg.cn/06eda98299e04c4b95a4a3c60817da39.png" width = "50%"/>
  </div></li>
</ul>
<ol start="9">
<li>点击 <strong>完成</strong> 即可</li>
</ol>
<h2 id="2-运行虚拟机"><a href="#2-运行虚拟机" class="headerlink" title="2 运行虚拟机"></a>2 运行虚拟机</h2><ol>
<li><p>开启此虚拟机</p>
<div align="center"> 
   <img src="https://img-blog.csdnimg.cn/29d25f6972ed442aacabb0e1169f0271.png" 
   width = "50%"/>
  </div></li>
<li><p>选择”Test this media &amp; install StarVE 4”</p>
<div align="center"> 
   <img src="https://img-blog.csdnimg.cn/2ac123b2795b4e5e8776c34e53889c58.png" 
   width = "50%"/>
  </div></li>
<li><p>设置 节点模式（&#x3D;&#x3D;Basic node&#x3D;&#x3D;） 和 硬盘选项（&#x3D;&#x3D;硬盘的对号打勾&#x3D;&#x3D;）</p>
<div align="center"> 
   <img src="https://img-blog.csdnimg.cn/85131a03b51b4262a97130865ea31166.png" 
   width = "50%"/>
  </div>
</li>
<li><p>设置网络</p>
<div align="center"> 
   <img src="https://img-blog.csdnimg.cn/4091b6b8f1c8421f9dbf03a91848d4d2.png" 
   width = "50%"/>
  </div>
**IPv4 Settings** -> Method: **Manual** → **Add**（==Address填 不与物理主机IP相同的 “任意无关IP”；Netmask 和 Gateway为 Deploy 节点的物理主机的子网掩码【255.255.255.0】 和 默认网关【192.168.43.1】（需要取证一下）==）
<div align="center"> 
   <img src="https://img-blog.csdnimg.cn/693ad5c91df443c0905207d2f24dffec.png" 
   width = "50%"/>
  </div>
Save后，改个主机字（有自己特色的），再点Apply
<div align="center"> 
   <img src="https://img-blog.csdnimg.cn/cac9d2c3bc184137ad7e15124cf6467c.png" 
   width = "50%"/>
  </div></li>
<li><p>点击左上角 <code>Done</code>，回到首页，点击开始安装</p>
</li>
<li><p>设置 root密码 和 用户账户</p>
<div align="center"> 
   <img src="https://img-blog.csdnimg.cn/df964438db2544588d2ff62a4066baab.png" 
   width = "50%"/>
  </div></li>
<li><p>安装完成后 reboot</p>
</li>
</ol>
<hr>
]]></content>
      <categories>
        <category>技术</category>
      </categories>
      <tags>
        <tag>Cloud Computing</tag>
        <tag>VMware</tag>
        <tag>StarVCenter</tag>
      </tags>
  </entry>
  <entry>
    <title>Hexo博客现存问题及可能的解决方案</title>
    <url>/2023/03/17/%60problem/</url>
    <content><![CDATA[<ol>
<li><p>切换刷新网页时，音乐播放器会刷新重置<br>​	solution: <a href="https://ariescat.top/2021/01/25/Pjax%E5%8A%A0%E6%8C%81APlayer-%E9%9F%B3%E4%B9%90%E6%97%A0%E9%97%B4%E6%96%AD/">Pjax加持APlayer，音乐无间断 Ariescat Blog</a></p>
</li>
<li><p>Artitalk说说心情发布<br>​	solution: <a href="https://blog.csdn.net/cungudafa/article/details/106224223">Artitalk说说心情发布页面（个性定制）</a></p>
</li>
<li><p>Valine 评论的进一步优化<br>​	solution：<a href="https://cungudafa.gitee.io/post/8202.html">Valine-1.4.4 个性制定（表情包、qq头像、UI样式）</a><br>​	<a href="https://blog.csdn.net/cungudafa/article/details/104281764">Valine - 一款快速、简洁且高效的无后端评论系统</a><br>​	<a href="https://blog.csdn.net/weixin_39531549/article/details/86651038">Valine – 一款极简的评论系统_AYXYJ的博客</a><br>​	<a href="http://www.luckysec.cn/posts/1d6f1579.html#toc-heading-5">Matery之Valine评论优化 | LuckySec</a><br>​	<a href="https://blog.justlovesmile.top/posts/27831.html">Hexo博客 | 如何让你的valine更好看 | Justlovesmile’s BLOG</a></p>
</li>
<li><p>搭建个人图床<br>​	solution：<a href="https://blog.csdn.net/qq_40531408/article/details/126070098">基于jsDelivr+GitHub的免费CDN</a> 他的其他博客也不错</p>
</li>
<li><p>Latex数学公式？？（急）</p>
</li>
</ol>
<hr>
<p>思考？（小心自我精神折磨）<a href="https://www.zhihu.com/question/438831051/answer/1891961165">如何废掉一个大学生？ - 知乎 (zhihu.com)</a></p>
<hr>
]]></content>
      <categories>
        <category>技术</category>
      </categories>
      <tags>
        <tag>Hexo</tag>
      </tags>
  </entry>
  <entry>
    <title>Windows相关问题及解决方案</title>
    <url>/2023/03/16/Windows-related-issues-and-solutions/</url>
    <content><![CDATA[<p><a href="https://www.win7zhijia.cn/win10jc/win10_51994.html">删除文件提示你需要来自system的权限才能对此文件夹进行更改(win7,win10,win11通用)</a></p>
<p><a href="https://www.disktool.cn/jiaocheng/extend-c-drive.html">在Windows中扩大C盘的4种方法</a></p>
<p><a href="https://blog.csdn.net/lingbomanbu628/article/details/121198056">在文件夹页面检索文件的内容</a></p>
<hr>
]]></content>
      <categories>
        <category>技术</category>
      </categories>
      <tags>
        <tag>Windows</tag>
      </tags>
  </entry>
  <entry>
    <title>Hello World Hexo</title>
    <url>/2020/12/27/hexo-hello-world/</url>
    <content><![CDATA[<p>Welcome to <a href="https://hexo.io/">Hexo</a>! This is your very first post. Check <a href="https://hexo.io/docs/">documentation</a> for more info. If you get any problems when using Hexo, you can find the answer in <a href="https://hexo.io/docs/troubleshooting.html">troubleshooting</a> or you can ask me on <a href="https://github.com/hexojs/hexo/issues">GitHub</a>.</p>
<h2 id="Quick-Start"><a href="#Quick-Start" class="headerlink" title="Quick Start"></a>Quick Start</h2><h3 id="Create-a-new-post"><a href="#Create-a-new-post" class="headerlink" title="Create a new post"></a>Create a new post</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ hexo new <span class="string">&quot;My-New-Post&quot;</span></span><br></pre></td></tr></table></figure>

<p>More info: <a href="https://hexo.io/docs/writing.html">Writing</a></p>
<h3 id="Generate-static-files"><a href="#Generate-static-files" class="headerlink" title="Generate static files"></a>Generate static files</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ hexo generate</span><br></pre></td></tr></table></figure>

<p>More info: <a href="https://hexo.io/docs/generating.html">Generating</a></p>
<h3 id="Run-server"><a href="#Run-server" class="headerlink" title="Run server"></a>Run server</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ hexo server</span><br></pre></td></tr></table></figure>

<p>More info: <a href="https://hexo.io/docs/server.html">Server</a></p>
<h3 id="Deploy-to-remote-sites"><a href="#Deploy-to-remote-sites" class="headerlink" title="Deploy to remote sites"></a>Deploy to remote sites</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ hexo deploy</span><br></pre></td></tr></table></figure>

<p>More info: <a href="https://hexo.io/docs/one-command-deployment.html">Deployment</a></p>
]]></content>
  </entry>
</search>
